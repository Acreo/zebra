/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/

#include "qzebra.h"

///
//  Copy-construct to return the proper wrapped c types
QXrapTraffic::QXrapTraffic (xrap_traffic_t *self, QObject *qObjParent) : QObject (qObjParent)
{
    this->self = self;
}


///
//  Create a new empty xrap_traffic
QXrapTraffic::QXrapTraffic (QObject *qObjParent) : QObject (qObjParent)
{
    this->self = xrap_traffic_new ();
}

///
//  Destroy a xrap_traffic instance
QXrapTraffic::~QXrapTraffic ()
{
    xrap_traffic_destroy (&self);
}

///
//  Receive a xrap_traffic from the socket. Returns 0 if OK, -1 if
//  there was an error. Blocks if there is no message waiting.    
int QXrapTraffic::recv (QZsock *input)
{
    int rv = xrap_traffic_recv (self, input->self);
    return rv;
}

///
//  Send the xrap_traffic to the output socket, does not destroy it
int QXrapTraffic::send (QZsock *output)
{
    int rv = xrap_traffic_send (self, output->self);
    return rv;
}

///
//  Print contents of message to stdout
void QXrapTraffic::print ()
{
    xrap_traffic_print (self);
    
}

///
//  Get the message routing id, as a frame
QZframe * QXrapTraffic::routingId ()
{
    QZframe *rv = new QZframe (xrap_traffic_routing_id (self));
    return rv;
}

///
//  Set the message routing id from a frame
void QXrapTraffic::setRoutingId (QZframe *routingId)
{
    xrap_traffic_set_routing_id (self, routingId->self);
    
}

///
//  Get the xrap_traffic message id
int QXrapTraffic::id ()
{
    int rv = xrap_traffic_id (self);
    return rv;
}

///
//  Set the xrap_traffic message id
void QXrapTraffic::setId (int id)
{
    xrap_traffic_set_id (self, id);
    
}

///
//  Get the xrap_traffic message id as printable text
const QString QXrapTraffic::command ()
{
    const QString rv = QString (xrap_traffic_command (self));
    return rv;
}

///
//  Get the address field
const QString QXrapTraffic::address ()
{
    const QString rv = QString (xrap_traffic_address (self));
    return rv;
}

///
//  Set the address field
void QXrapTraffic::setAddress (const QString &address)
{
    xrap_traffic_set_address (self, address.toUtf8().data());
    
}

///
//  Get the timeout field
quint32 QXrapTraffic::timeout ()
{
    uint32_t rv = xrap_traffic_timeout (self);
    return rv;
}

///
//  Set the timeout field
void QXrapTraffic::setTimeout (quint32 timeout)
{
    xrap_traffic_set_timeout (self, (uint32_t) timeout);
    
}

///
//  Get a copy of the content field
QZmsg * QXrapTraffic::content ()
{
    QZmsg *rv = new QZmsg (xrap_traffic_content (self));
    return rv;
}

///
//  Get the content field and transfer ownership to caller
QZmsg * QXrapTraffic::getContent ()
{
    QZmsg *rv = new QZmsg (xrap_traffic_get_content (self));
    return rv;
}

///
//  
void QXrapTraffic::setContent (QZmsg *contentP)
{
    xrap_traffic_set_content (self, &contentP->self);
    
}

///
//  Get the route field
const QString QXrapTraffic::route ()
{
    const QString rv = QString (xrap_traffic_route (self));
    return rv;
}

///
//  Set the route field
void QXrapTraffic::setRoute (const QString &route)
{
    xrap_traffic_set_route (self, route.toUtf8().data());
    
}

///
//  Get the method field
const QString QXrapTraffic::method ()
{
    const QString rv = QString (xrap_traffic_method (self));
    return rv;
}

///
//  Set the method field
void QXrapTraffic::setMethod (const QString &method)
{
    xrap_traffic_set_method (self, method.toUtf8().data());
    
}

///
//  Get the sender field
QZuuid * QXrapTraffic::sender ()
{
    QZuuid *rv = new QZuuid (xrap_traffic_sender (self));
    return rv;
}

///
//  Get the sender field and transfer ownership to caller
QZuuid * QXrapTraffic::getSender ()
{
    QZuuid *rv = new QZuuid (xrap_traffic_get_sender (self));
    return rv;
}

///
//  Set the sender field
void QXrapTraffic::setSender (QZuuid *senderP)
{
    xrap_traffic_set_sender (self, senderP->self);
    
}

///
//  Get the status_code field
quint16 QXrapTraffic::statusCode ()
{
    uint16_t rv = xrap_traffic_status_code (self);
    return rv;
}

///
//  Set the status_code field
void QXrapTraffic::setStatusCode (quint16 statusCode)
{
    xrap_traffic_set_status_code (self, (uint16_t) statusCode);
    
}

///
//  Get the status_reason field
const QString QXrapTraffic::statusReason ()
{
    const QString rv = QString (xrap_traffic_status_reason (self));
    return rv;
}

///
//  Set the status_reason field
void QXrapTraffic::setStatusReason (const QString &statusReason)
{
    xrap_traffic_set_status_reason (self, statusReason.toUtf8().data());
    
}

///
//  Self test of this class.
void QXrapTraffic::test (bool verbose)
{
    xrap_traffic_test (verbose);
    
}
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
