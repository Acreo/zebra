/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/

#include "qzwebrap.h"

///
//  Private copy-construct to return the proper wrapped c types
QZframe::QZframe (zframe_t *self, QObject *parent) : QObject (parent)
{
    this->self = self;
}


///
//  Create a new frame. If size is not null, allocates the frame data
//  to the specified size. If additionally, data is not null, copies 
//  size octets from the specified data into the frame body.         
QZframe::QZframe (const void *data, size_t size, QObject *parent) : QObject (parent)
{
    this->self = zframe_new (data, size);
}

///
//  Destroy a frame
QZframe::~QZframe ()
{
    zframe_destroy (&self);
}

///
//  Create an empty (zero-sized) frame
QZframe * QZframe::newEmpty ()
{
    QZframe *retQ_ = new QZframe (zframe_new_empty ());
    return retQ_;
}

///
//  Create a frame with a specified string content.
QZframe * QZframe::from (const QString &string)
{
    QZframe *retQ_ = new QZframe (zframe_from (string.toUtf8().data()));
    return retQ_;
}

///
//  Receive frame from socket, returns zframe_t object or NULL if the recv  
//  was interrupted. Does a blocking recv, if you want to not block then use
//  zpoller or zloop.                                                       
QZframe * QZframe::recv (void *source)
{
    QZframe *retQ_ = new QZframe (zframe_recv (source));
    return retQ_;
}

///
//  Send a frame to a socket, destroy frame after sending.
//  Return -1 on error, 0 on success.                     
int QZframe::send (void *dest, int flags)
{
    return zframe_send (&self, dest, flags);
}

///
//  Send a reply frame to a server socket, copy the routing id from source message, destroy frame after sending.
//  Return -1 on error, 0 on success.                                                                           
int QZframe::sendReply (QZframe *sourceMsg, void *dest, int flags)
{
    return zframe_send_reply (&self, sourceMsg->self, dest, flags);
}

///
//  Return number of bytes in frame data
size_t QZframe::size ()
{
    return zframe_size (self);
}

///
//  Return address of frame data
byte * QZframe::data ()
{
    return zframe_data (self);
}

///
//  Create a new frame that duplicates an existing frame. If frame is null,
//  or memory was exhausted, returns null.                                 
QZframe * QZframe::dup ()
{
    QZframe *retQ_ = new QZframe (zframe_dup (self));
    return retQ_;
}

///
//  Return frame data encoded as printable hex string, useful for 0MQ UUIDs.
//  Caller must free string when finished with it.                          
QString QZframe::strhex ()
{
    char *retStr_ = zframe_strhex (self);
    QString retQStr_ = QString (retStr_);
    free (retStr_);
    return retQStr_;
}

///
//  Return frame data copied into freshly allocated string
//  Caller must free string when finished with it.        
QString QZframe::strdup ()
{
    char *retStr_ = zframe_strdup (self);
    QString retQStr_ = QString (retStr_);
    free (retStr_);
    return retQStr_;
}

///
//  Return TRUE if frame body is equal to string, excluding terminator
bool QZframe::streqNoConflict (const QString &string)
{
    return zframe_streq (self, string.toUtf8().data());
}

///
//  Return frame MORE indicator (1 or 0), set when reading frame from socket
//  or by the zframe_set_more() method                                      
int QZframe::more ()
{
    return zframe_more (self);
}

///
//  Set frame MORE indicator (1 or 0). Note this is NOT used when sending
//  frame to socket, you have to specify flag explicitly.                
void QZframe::setMore (int more)
{
    zframe_set_more (self, more);
}

///
//  Return frame routing id, set when reading frame from server socket
//  or by the zframe_set_routing_id() method.                         
size_t QZframe::routingId ()
{
    return zframe_routing_id (self);
}

///
//  Set frame routing id. Only relevant when sending to server socket.
void QZframe::setRoutingId (size_t routingId)
{
    zframe_set_routing_id (self, routingId);
}

///
//  Return TRUE if two frames have identical size and data
//  If either frame is NULL, equality is always false.    
bool QZframe::eq (QZframe *other)
{
    return zframe_eq (self, other->self);
}

///
//  Set new contents for frame
void QZframe::reset (const void *data, size_t size)
{
    zframe_reset (self, data, size);
}

///
//  Send message to zsys log sink (may be stdout, or system facility as       
//  configured by zsys_set_logstream). Prefix shows before frame, if not null.
void QZframe::print (const QString &prefix)
{
    zframe_print (self, prefix.toUtf8().data());
}

///
//  Probe the supplied object, and report if it looks like a zframe_t.
bool QZframe::is (void *self)
{
    return zframe_is (self);
}

///
//  Self test of this class
void QZframe::test (bool verbose)
{
    zframe_test (verbose);
}
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
