/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/

#include "qzwebrap.h"

///
//  Private copy-construct to return the proper wrapped c types
QZuuid::QZuuid (zuuid_t *self, QObject *parent) : QObject (parent)
{
    this->self = self;
}


///
//  Constructor
QZuuid::QZuuid (QObject *parent) : QObject (parent)
{
    this->self = zuuid_new ();
}

///
//  Destructor
QZuuid::~QZuuid ()
{
    zuuid_destroy (&self);
}

///
//  Print properties of the zuuid object.
void QZuuid::print ()
{
    zuuid_print (self);
}

///
//  Create UUID object from supplied ZUUID_LEN-octet value.
QZuuid * QZuuid::newFrom (const byte *source)
{
    QZuuid *retQ_ = new QZuuid (zuuid_new_from (source));
    return retQ_;
}

///
//  Set UUID to new supplied ZUUID_LEN-octet value.
void QZuuid::set (const byte *source)
{
    zuuid_set (self, source);
}

///
//  Set UUID to new supplied string value skipping '-' and '{' '}'
//  optional delimiters. Return 0 if OK, else returns -1.         
int QZuuid::setStr (const QString &source)
{
    return zuuid_set_str (self, source.toUtf8().data());
}

///
//  Return UUID binary data.
const byte * QZuuid::data ()
{
    return zuuid_data (self);
}

///
//  Return UUID binary size
size_t QZuuid::size ()
{
    return zuuid_size (self);
}

///
//  Returns UUID as string
const QString QZuuid::str ()
{
    return QString (zuuid_str (self));
}

///
//  Return UUID in the canonical string format: 8-4-4-4-12, in lower
//  case. Caller does not modify or free returned value. See        
//  http://en.wikipedia.org/wiki/Universally_unique_identifier      
const QString QZuuid::strCanonical ()
{
    return QString (zuuid_str_canonical (self));
}

///
//  Store UUID blob in target array
void QZuuid::export (byte *target)
{
    zuuid_export (self, target);
}

///
//  Check if UUID is same as supplied value
bool QZuuid::eq (const byte *compare)
{
    return zuuid_eq (self, compare);
}

///
//  Check if UUID is different from supplied value
bool QZuuid::neq (const byte *compare)
{
    return zuuid_neq (self, compare);
}

///
//  Make copy of UUID object; if uuid is null, or memory was exhausted,
//  returns null.                                                      
QZuuid * QZuuid::dup ()
{
    QZuuid *retQ_ = new QZuuid (zuuid_dup (self));
    return retQ_;
}

///
//  Self test of this class
void QZuuid::test (bool verbose)
{
    zuuid_test (verbose);
}
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
