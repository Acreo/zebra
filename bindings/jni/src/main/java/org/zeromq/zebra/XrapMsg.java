/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.zebra;
import org.zeromq.czmq.*;

public class XrapMsg implements AutoCloseable{
    static {
        try {
            System.loadLibrary ("zebrajni");
        }
        catch (Exception e) {
            System.exit (-1);
        }
    }
    public long self;
    /*
    Create a new xrap_msg
    */
    native static long __new (int id);
    public XrapMsg (int id) {
        /*  TODO: if __new fails, self is null...            */
        self = __new (id);
    }
    public XrapMsg (long pointer) {
        self = pointer;
    }
    /*
    Destroy the xrap_msg
    */
    native static void __destroy (long self);
    @Override
    public void close () {
        __destroy (self);
        self = 0;
    }
    /*
    Parse a xrap_msg from zmsg_t. Returns a new object, or NULL if
    the message could not be parsed, or was NULL. Destroys msg and
    nullifies the msg reference.                                  
    */
    native static long __decode (long msgP);
    public XrapMsg decode (Zmsg msgP) {
        return new XrapMsg (__decode (msgP.self));
    }
    /*
    Encode xrap_msg into zmsg and destroy it. Returns a newly created       
    object or NULL if error. Use when not in control of sending the message.
    */
    native static long __encode (long xrapMsgP);
    public Zmsg encode (XrapMsg xrapMsgP) {
        return new Zmsg (__encode (xrapMsgP.self));
    }
    /*
    Receive and parse a xrap_msg from the socket. Returns new object,
    or NULL if error. Will block if there's no message waiting.      
    */
    native static long __recv (long input);
    public XrapMsg recv (long input) {
        return new XrapMsg (__recv (input));
    }
    /*
    Receive and parse a xrap_msg from the socket. Returns new object,         
    or NULL either if there was no input waiting, or the recv was interrupted.
    */
    native static long __recvNowait (long input);
    public XrapMsg recvNowait (long input) {
        return new XrapMsg (__recvNowait (input));
    }
    /*
    Send the xrap_msg to the output, and destroy it
    */
    native static long __send (long self, long output);
    public int send (long output) {
        self = __send (self, output);
        return 0;
    }
    /*
    Send the xrap_msg to the output, and destroy it
    */
    native static int __sendAgain (long self, long output);
    public int sendAgain (long output) {
        return __sendAgain (self, output);
    }
    /*
    Get the xrap_msg id and printable command
    */
    native static int __id (long self);
    public int id () {
        return __id (self);
    }
    /*
    
    */
    native static void __setId (long self, int id);
    public void setId (int id) {
        __setId (self, id);
    }
    /*
    Get/set the parent field
    */
    native static String __parent (long self);
    public String parent () {
        return __parent (self);
    }
    /*
    
    */
    native static void __setParent (long self, String format);
    public void setParent (String format) {
        __setParent (self, format);
    }
    /*
    Get/set the content_type field
    */
    native static String __contentType (long self);
    public String contentType () {
        return __contentType (self);
    }
    /*
    
    */
    native static void __setContentType (long self, String format);
    public void setContentType (String format) {
        __setContentType (self, format);
    }
    /*
    Get/set the parent field
    */
    native static String __contentBody (long self);
    public String contentBody () {
        return __contentBody (self);
    }
    /*
    
    */
    native static void __setContentBody (long self, String format);
    public void setContentBody (String format) {
        __setContentBody (self, format);
    }
    /*
    Get/set the status_code field
    */
    native static short __statusCode (long self);
    public short statusCode () {
        return __statusCode (self);
    }
    /*
    
    */
    native static void __setStatusCode (long self, short statusCode);
    public void setStatusCode (short statusCode) {
        __setStatusCode (self, statusCode);
    }
    /*
    Get/set the location field
    */
    native static String __location (long self);
    public String location () {
        return __location (self);
    }
    /*
    
    */
    native static void __setLocation (long self, String format);
    public void setLocation (String format) {
        __setLocation (self, format);
    }
    /*
    Get/set the etag field
    */
    native static String __etag (long self);
    public String etag () {
        return __etag (self);
    }
    /*
    
    */
    native static void __setEtag (long self, String format);
    public void setEtag (String format) {
        __setEtag (self, format);
    }
    /*
    Get/set the date_modified field
    */
    native static long __dateModified (long self);
    public long dateModified () {
        return __dateModified (self);
    }
    /*
    
    */
    native static void __setDateModified (long self, long dateModified);
    public void setDateModified (long dateModified) {
        __setDateModified (self, dateModified);
    }
    /*
    Get/set the resource field
    */
    native static String __resource (long self);
    public String resource () {
        return __resource (self);
    }
    /*
    
    */
    native static void __setResource (long self, String format);
    public void setResource (String format) {
        __setResource (self, format);
    }
    /*
    //  Get/set the parameters field
    */
    native static long __parameters (long self);
    public Zhash parameters () {
        return new Zhash (__parameters (self));
    }
    /*
    //  Get the parameters field and transfer ownership to caller
    */
    native static long __getParameters (long self);
    public Zhash getParameters () {
        return new Zhash (__getParameters (self));
    }
    /*
    
    */
    native static void __setParameters (long self, long parametersP);
    public void setParameters (Zhash parametersP) {
        __setParameters (self, parametersP.self);
    }
    /*
    Get/set the parameters field
    */
    native static String __parametersString (long self, String key, String defaultValue);
    public String parametersString (String key, String defaultValue) {
        return __parametersString (self, key, defaultValue);
    }
    /*
    
    */
    native static void __parametersInsert (long self, String key, String format);
    public void parametersInsert (String key, String format) {
        __parametersInsert (self, key, format);
    }
    /*
    Get/set the if_modified_since field
    */
    native static long __ifModifiedSince (long self);
    public long ifModifiedSince () {
        return __ifModifiedSince (self);
    }
    /*
    
    */
    native static void __setIfModifiedSince (long self, long ifModifiedSince);
    public void setIfModifiedSince (long ifModifiedSince) {
        __setIfModifiedSince (self, ifModifiedSince);
    }
    /*
    Get/set the if_none_match field
    */
    native static String __ifNoneMatch (long self);
    public String ifNoneMatch () {
        return __ifNoneMatch (self);
    }
    /*
    
    */
    native static void __setIfNoneMatch (long self, String format);
    public void setIfNoneMatch (String format) {
        __setIfNoneMatch (self, format);
    }
    /*
    //  Get/set the metadata field
    */
    native static long __metadata (long self);
    public Zhash metadata () {
        return new Zhash (__metadata (self));
    }
    /*
    //  Get the metadata field and transfer ownership to caller
    */
    native static long __getMetadata (long self);
    public Zhash getMetadata () {
        return new Zhash (__getMetadata (self));
    }
    /*
    
    */
    native static void __setMetadata (long self, long metadataP);
    public void setMetadata (Zhash metadataP) {
        __setMetadata (self, metadataP.self);
    }
    /*
    Get/set a value in the metadata dictionary
    */
    native static String __metadataString (long self, String key, String defaultValue);
    public String metadataString (String key, String defaultValue) {
        return __metadataString (self, key, defaultValue);
    }
    /*
    
    */
    native static void __metadataInsert (long self, String key, String format);
    public void metadataInsert (String key, String format) {
        __metadataInsert (self, key, format);
    }
    /*
    Get/set the if_unmodified_since field
    */
    native static long __ifUnmodifiedSince (long self);
    public long ifUnmodifiedSince () {
        return __ifUnmodifiedSince (self);
    }
    /*
    
    */
    native static void __setIfUnmodifiedSince (long self, long ifUnmodifiedSince);
    public void setIfUnmodifiedSince (long ifUnmodifiedSince) {
        __setIfUnmodifiedSince (self, ifUnmodifiedSince);
    }
    /*
    Get/set the if_match field
    */
    native static String __ifMatch (long self);
    public String ifMatch () {
        return __ifMatch (self);
    }
    /*
    
    */
    native static void __setIfMatch (long self, String format);
    public void setIfMatch (String format) {
        __setIfMatch (self, format);
    }
    /*
    Get/set the status_text field
    */
    native static String __statusText (long self);
    public String statusText () {
        return __statusText (self);
    }
    /*
    
    */
    native static void __setStatusText (long self, String format);
    public void setStatusText (String format) {
        __setStatusText (self, format);
    }
    /*
    Self test of this class.
    */
    native static void __test (boolean verbose);
    public static void test (boolean verbose) {
        __test (verbose);
    }
}
