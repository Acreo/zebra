################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################

module Zebra
  module FFI

    #     XRAP serialization over ZMTP                                        
    #                                                                         
    # /*  These are the xrap_msg messages:                                    
    #                                                                         
    #     POST - Create a new, dynamically named resource in some parent.     
    #         parent              string      Schema/type/name                
    #         content_type        string      Content type                    
    #         content_body        longstr     New resource specification      
    #                                                                         
    #     POST_OK - Success response for POST.                                
    #         status_code         number 2    Response status code 2xx        
    #         location            string      Schema/type/name                
    #         etag                string      Opaque hash tag                 
    #         date_modified       number 8    Date and time modified          
    #         content_type        string      Content type                    
    #         content_body        longstr     Resource contents               
    #                                                                         
    #     GET - Retrieve a known resource.                                    
    #         resource            string      Schema/type/name                
    #         if_modified_since   number 8    GET if more recent              
    #         if_none_match       string      GET if changed                  
    #         content_type        string      Desired content type            
    #                                                                         
    #     GET_OK - Success response for GET.                                  
    #         status_code         number 2    Response status code 2xx        
    #         content_type        string      Actual content type             
    #         content_body        longstr     Resource specification          
    #                                                                         
    #     GET_EMPTY - Conditional GET returned 304 Not Modified.              
    #         status_code         number 2    Response status code 3xx        
    #                                                                         
    #     PUT - Update a known resource.                                      
    #         resource            string      Schema/type/name                
    #         if_unmodified_since  number 8   Update if same date             
    #         if_match            string      Update if same ETag             
    #         content_type        string      Content type                    
    #         content_body        longstr     New resource specification      
    #                                                                         
    #     PUT_OK - Success response for PUT.                                  
    #         status_code         number 2    Response status code 2xx        
    #         location            string      Schema/type/name                
    #         etag                string      Opaque hash tag                 
    #         date_modified       number 8    Date and time modified          
    #                                                                         
    #     DELETE - Remove a known resource.                                   
    #         resource            string      schema/type/name                
    #         if_unmodified_since  number 8   DELETE if same date             
    #         if_match            string      DELETE if same ETag             
    #                                                                         
    #     DELETE_OK - Success response for DELETE.                            
    #         status_code         number 2    Response status code 2xx        
    #                                                                         
    #     ERROR - Error response for any request.                             
    #         status_code         number 2    Response status code, 4xx or 5xx
    #         status_text         string      Response status text            
    # */                                                                      
    # @note This class is 100% generated using zproject.
    class XrapMsg
      # 
      POST = 1

      # 
      POST_OK = 2

      # 
      GET = 3

      # 
      GET_OK = 4

      # 
      GET_EMPTY = 5

      # 
      PUT = 6

      # 
      PUT_OK = 7

      # 
      DELETE = 8

      # 
      DELETE_OK = 9

      # 
      ERROR = 10

      # Raised when one tries to use an instance of {XrapMsg} after
      # the internal pointer to the native object has been nullified.
      class DestroyedError < RuntimeError; end

      # Boilerplate for self pointer, initializer, and finalizer
      class << self
        alias :__new :new
      end
      # Attaches the pointer _ptr_ to this instance and defines a finalizer for
      # it if necessary.
      # @param ptr [::FFI::Pointer]
      # @param finalize [Boolean]
      def initialize(ptr, finalize = true)
        @ptr = ptr
        if @ptr.null?
          @ptr = nil # Remove null pointers so we don't have to test for them.
        elsif finalize
          @finalizer = self.class.create_finalizer_for @ptr
          ObjectSpace.define_finalizer self, @finalizer
        end
      end
      # @param ptr [::FFI::Pointer]
      # @return [Proc]
      def self.create_finalizer_for(ptr)
        Proc.new do
          ptr_ptr = ::FFI::MemoryPointer.new :pointer
          ptr_ptr.write_pointer ptr
          ::Zebra::FFI.xrap_msg_destroy ptr_ptr
        end
      end
      # @return [Boolean]
      def null?
        !@ptr or @ptr.null?
      end
      # Return internal pointer
      # @return [::FFI::Pointer]
      def __ptr
        raise DestroyedError unless @ptr
        @ptr
      end
      # So external Libraries can just pass the Object to a FFI function which expects a :pointer
      alias_method :to_ptr, :__ptr
      # Nullify internal pointer and return pointer pointer.
      # @note This detaches the current instance from the native object
      #   and thus makes it unusable.
      # @return [::FFI::MemoryPointer] the pointer pointing to a pointer
      #   pointing to the native object
      def __ptr_give_ref
        raise DestroyedError unless @ptr
        ptr_ptr = ::FFI::MemoryPointer.new :pointer
        ptr_ptr.write_pointer @ptr
        __undef_finalizer if @finalizer
        @ptr = nil
        ptr_ptr
      end
      # Undefines the finalizer for this object.
      # @note Only use this if you need to and can guarantee that the native
      #   object will be freed by other means.
      # @return [void]
      def __undef_finalizer
        ObjectSpace.undefine_finalizer self
        @finalizer = nil
      end

      # Create a new xrap_msg
      # @param id [Integer, #to_int, #to_i]
      # @return [Zebra::XrapMsg]
      def self.new(id)
        id = Integer(id)
        ptr = ::Zebra::FFI.xrap_msg_new(id)
        __new ptr
      end

      # Destroy the xrap_msg
      #
      # @return [void]
      def destroy()
        return unless @ptr
        self_p = __ptr_give_ref
        result = ::Zebra::FFI.xrap_msg_destroy(self_p)
        result
      end

      # Parse a xrap_msg from zmsg_t. Returns a new object, or NULL if
      # the message could not be parsed, or was NULL. Destroys msg and
      # nullifies the msg reference.                                  
      #
      # @param msg_p [::FFI::Pointer, #to_ptr]
      # @return [XrapMsg]
      def self.decode(msg_p)
        result = ::Zebra::FFI.xrap_msg_decode(msg_p)
        result = XrapMsg.__new result, false
        result
      end

      # Encode xrap_msg into zmsg and destroy it. Returns a newly created       
      # object or NULL if error. Use when not in control of sending the message.
      #
      # @param xrap_msg_p [#__ptr_give_ref]
      # @return [::FFI::Pointer]
      def self.encode(xrap_msg_p)
        xrap_msg_p = xrap_msg_p.__ptr_give_ref
        result = ::Zebra::FFI.xrap_msg_encode(xrap_msg_p)
        result
      end

      # Receive and parse a xrap_msg from the socket. Returns new object,
      # or NULL if error. Will block if there's no message waiting.      
      #
      # @param input [::FFI::Pointer, #to_ptr]
      # @return [XrapMsg]
      def self.recv(input)
        result = ::Zebra::FFI.xrap_msg_recv(input)
        result = XrapMsg.__new result, false
        result
      end

      # Receive and parse a xrap_msg from the socket. Returns new object,         
      # or NULL either if there was no input waiting, or the recv was interrupted.
      #
      # @param input [::FFI::Pointer, #to_ptr]
      # @return [XrapMsg]
      def self.recv_nowait(input)
        result = ::Zebra::FFI.xrap_msg_recv_nowait(input)
        result = XrapMsg.__new result, false
        result
      end

      # Send the xrap_msg to the output, and destroy it
      #
      # @param self_p [#__ptr_give_ref]
      # @param output [::FFI::Pointer, #to_ptr]
      # @return [Integer]
      def self.send(self_p, output)
        self_p = self_p.__ptr_give_ref
        result = ::Zebra::FFI.xrap_msg_send(self_p, output)
        result
      end

      # Send the xrap_msg to the output, and destroy it
      #
      # @param output [::FFI::Pointer, #to_ptr]
      # @return [Integer]
      def send_again(output)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_send_again(self_p, output)
        result
      end

      # Get the xrap_msg id and printable command
      #
      # @return [Integer]
      def id()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_id(self_p)
        result
      end

      # 
      #
      # @param id [Integer, #to_int, #to_i]
      # @return [void]
      def set_id(id)
        raise DestroyedError unless @ptr
        self_p = @ptr
        id = Integer(id)
        result = ::Zebra::FFI.xrap_msg_set_id(self_p, id)
        result
      end

      # Get/set the parent field
      #
      # @return [String]
      def parent()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_parent(self_p)
        result
      end

      # 
      #
      # @param format [String, #to_s, nil]
      # @param args [Array<Object>] see https://github.com/ffi/ffi/wiki/examples#using-varargs
      # @return [void]
      def set_parent(format, *args)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_set_parent(self_p, format, *args)
        result
      end

      # Get/set the content_type field
      #
      # @return [String]
      def content_type()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_content_type(self_p)
        result
      end

      # 
      #
      # @param format [String, #to_s, nil]
      # @param args [Array<Object>] see https://github.com/ffi/ffi/wiki/examples#using-varargs
      # @return [void]
      def set_content_type(format, *args)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_set_content_type(self_p, format, *args)
        result
      end

      # Get/set the parent field
      #
      # @return [String]
      def content_body()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_content_body(self_p)
        result
      end

      # 
      #
      # @param format [String, #to_s, nil]
      # @param args [Array<Object>] see https://github.com/ffi/ffi/wiki/examples#using-varargs
      # @return [void]
      def set_content_body(format, *args)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_set_content_body(self_p, format, *args)
        result
      end

      # Get/set the status_code field
      #
      # @return [Integer]
      def status_code()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_status_code(self_p)
        result
      end

      # 
      #
      # @param status_code [Integer, #to_int, #to_i]
      # @return [void]
      def set_status_code(status_code)
        raise DestroyedError unless @ptr
        self_p = @ptr
        status_code = Integer(status_code)
        result = ::Zebra::FFI.xrap_msg_set_status_code(self_p, status_code)
        result
      end

      # Get/set the location field
      #
      # @return [String]
      def location()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_location(self_p)
        result
      end

      # 
      #
      # @param format [String, #to_s, nil]
      # @param args [Array<Object>] see https://github.com/ffi/ffi/wiki/examples#using-varargs
      # @return [void]
      def set_location(format, *args)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_set_location(self_p, format, *args)
        result
      end

      # Get/set the etag field
      #
      # @return [String]
      def etag()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_etag(self_p)
        result
      end

      # 
      #
      # @param format [String, #to_s, nil]
      # @param args [Array<Object>] see https://github.com/ffi/ffi/wiki/examples#using-varargs
      # @return [void]
      def set_etag(format, *args)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_set_etag(self_p, format, *args)
        result
      end

      # Get/set the date_modified field
      #
      # @return [Integer]
      def date_modified()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_date_modified(self_p)
        result
      end

      # 
      #
      # @param date_modified [Integer, #to_int, #to_i]
      # @return [void]
      def set_date_modified(date_modified)
        raise DestroyedError unless @ptr
        self_p = @ptr
        date_modified = Integer(date_modified)
        result = ::Zebra::FFI.xrap_msg_set_date_modified(self_p, date_modified)
        result
      end

      # Get/set the resource field
      #
      # @return [String]
      def resource()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_resource(self_p)
        result
      end

      # 
      #
      # @param format [String, #to_s, nil]
      # @param args [Array<Object>] see https://github.com/ffi/ffi/wiki/examples#using-varargs
      # @return [void]
      def set_resource(format, *args)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_set_resource(self_p, format, *args)
        result
      end

      # //  Get/set the parameters field
      #
      # @return [::FFI::Pointer]
      def parameters()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_parameters(self_p)
        result
      end

      # //  Get the parameters field and transfer ownership to caller
      #
      # @return [::FFI::Pointer]
      def get_parameters()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_get_parameters(self_p)
        result
      end

      # 
      #
      # @param parameters_p [::FFI::Pointer, #to_ptr]
      # @return [void]
      def set_parameters(parameters_p)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_set_parameters(self_p, parameters_p)
        result
      end

      # Get/set the parameters field
      #
      # @param key [String, #to_s, nil]
      # @param default_value [String, #to_s, nil]
      # @return [String]
      def parameters_string(key, default_value)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_parameters_string(self_p, key, default_value)
        result
      end

      # 
      #
      # @param key [String, #to_s, nil]
      # @param format [String, #to_s, nil]
      # @param args [Array<Object>] see https://github.com/ffi/ffi/wiki/examples#using-varargs
      # @return [void]
      def parameters_insert(key, format, *args)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_parameters_insert(self_p, key, format, *args)
        result
      end

      # Get/set the if_modified_since field
      #
      # @return [Integer]
      def if_modified_since()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_if_modified_since(self_p)
        result
      end

      # 
      #
      # @param if_modified_since [Integer, #to_int, #to_i]
      # @return [void]
      def set_if_modified_since(if_modified_since)
        raise DestroyedError unless @ptr
        self_p = @ptr
        if_modified_since = Integer(if_modified_since)
        result = ::Zebra::FFI.xrap_msg_set_if_modified_since(self_p, if_modified_since)
        result
      end

      # Get/set the if_none_match field
      #
      # @return [String]
      def if_none_match()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_if_none_match(self_p)
        result
      end

      # 
      #
      # @param format [String, #to_s, nil]
      # @param args [Array<Object>] see https://github.com/ffi/ffi/wiki/examples#using-varargs
      # @return [void]
      def set_if_none_match(format, *args)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_set_if_none_match(self_p, format, *args)
        result
      end

      # //  Get/set the metadata field
      #
      # @return [::FFI::Pointer]
      def metadata()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_metadata(self_p)
        result
      end

      # //  Get the metadata field and transfer ownership to caller
      #
      # @return [::FFI::Pointer]
      def get_metadata()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_get_metadata(self_p)
        result
      end

      # 
      #
      # @param metadata_p [::FFI::Pointer, #to_ptr]
      # @return [void]
      def set_metadata(metadata_p)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_set_metadata(self_p, metadata_p)
        result
      end

      # Get/set a value in the metadata dictionary
      #
      # @param key [String, #to_s, nil]
      # @param default_value [String, #to_s, nil]
      # @return [String]
      def metadata_string(key, default_value)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_metadata_string(self_p, key, default_value)
        result
      end

      # 
      #
      # @param key [String, #to_s, nil]
      # @param format [String, #to_s, nil]
      # @param args [Array<Object>] see https://github.com/ffi/ffi/wiki/examples#using-varargs
      # @return [void]
      def metadata_insert(key, format, *args)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_metadata_insert(self_p, key, format, *args)
        result
      end

      # Get/set the if_unmodified_since field
      #
      # @return [Integer]
      def if_unmodified_since()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_if_unmodified_since(self_p)
        result
      end

      # 
      #
      # @param if_unmodified_since [Integer, #to_int, #to_i]
      # @return [void]
      def set_if_unmodified_since(if_unmodified_since)
        raise DestroyedError unless @ptr
        self_p = @ptr
        if_unmodified_since = Integer(if_unmodified_since)
        result = ::Zebra::FFI.xrap_msg_set_if_unmodified_since(self_p, if_unmodified_since)
        result
      end

      # Get/set the if_match field
      #
      # @return [String]
      def if_match()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_if_match(self_p)
        result
      end

      # 
      #
      # @param format [String, #to_s, nil]
      # @param args [Array<Object>] see https://github.com/ffi/ffi/wiki/examples#using-varargs
      # @return [void]
      def set_if_match(format, *args)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_set_if_match(self_p, format, *args)
        result
      end

      # Get/set the status_text field
      #
      # @return [String]
      def status_text()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_status_text(self_p)
        result
      end

      # 
      #
      # @param format [String, #to_s, nil]
      # @param args [Array<Object>] see https://github.com/ffi/ffi/wiki/examples#using-varargs
      # @return [void]
      def set_status_text(format, *args)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.xrap_msg_set_status_text(self_p, format, *args)
        result
      end

      # Self test of this class.
      #
      # @param verbose [Boolean]
      # @return [void]
      def self.test(verbose)
        verbose = !(0==verbose||!verbose) # boolean
        result = ::Zebra::FFI.xrap_msg_test(verbose)
        result
      end
    end
  end
end

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
