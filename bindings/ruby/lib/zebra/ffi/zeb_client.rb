################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

module Zebra
  module FFI

    # zeb_broker client implementation for both clients and handlers
    #                                                               
    #     Codec class for zeb_client.                               
    # @note This class is 100% generated using zproject.
    class ZebClient
      # Raised when one tries to use an instance of {ZebClient} after
      # the internal pointer to the native object has been nullified.
      class DestroyedError < RuntimeError; end

      # Boilerplate for self pointer, initializer, and finalizer
      class << self
        alias :__new :new
      end
      # Attaches the pointer _ptr_ to this instance and defines a finalizer for
      # it if necessary.
      # @param ptr [::FFI::Pointer]
      # @param finalize [Boolean]
      def initialize(ptr, finalize = true)
        @ptr = ptr
        if @ptr.null?
          @ptr = nil # Remove null pointers so we don't have to test for them.
        elsif finalize
          @finalizer = self.class.create_finalizer_for @ptr
          ObjectSpace.define_finalizer self, @finalizer
        end
      end
      # @param ptr [::FFI::Pointer]
      # @return [Proc]
      def self.create_finalizer_for(ptr)
        Proc.new do
          ptr_ptr = ::FFI::MemoryPointer.new :pointer
          ptr_ptr.write_pointer ptr
          ::Zebra::FFI.zeb_client_destroy ptr_ptr
        end
      end
      # @return [Boolean]
      def null?
        !@ptr or @ptr.null?
      end
      # Return internal pointer
      # @return [::FFI::Pointer]
      def __ptr
        raise DestroyedError unless @ptr
        @ptr
      end
      # So external Libraries can just pass the Object to a FFI function which expects a :pointer
      alias_method :to_ptr, :__ptr
      # Nullify internal pointer and return pointer pointer.
      # @note This detaches the current instance from the native object
      #   and thus makes it unusable.
      # @return [::FFI::MemoryPointer] the pointer pointing to a pointer
      #   pointing to the native object
      def __ptr_give_ref
        raise DestroyedError unless @ptr
        ptr_ptr = ::FFI::MemoryPointer.new :pointer
        ptr_ptr.write_pointer @ptr
        __undef_finalizer if @finalizer
        @ptr = nil
        ptr_ptr
      end
      # Undefines the finalizer for this object.
      # @note Only use this if you need to and can guarantee that the native
      #   object will be freed by other means.
      # @return [void]
      def __undef_finalizer
        ObjectSpace.undefine_finalizer self
        @finalizer = nil
      end

      # Create a new zeb_client, return the reference if successful,   
      # or NULL if construction failed due to lack of available memory.
      # @return [Zebra::ZebClient]
      def self.new()
        ptr = ::Zebra::FFI.zeb_client_new()
        __new ptr
      end

      # Destroy the zeb_client and free all memory used by the object.
      #
      # @return [void]
      def destroy()
        return unless @ptr
        self_p = __ptr_give_ref
        result = ::Zebra::FFI.zeb_client_destroy(self_p)
        result
      end

      # Return actor, when caller wants to work with multiple actors and/or
      # input sockets asynchronously.                                      
      #
      # @return [::FFI::Pointer]
      def actor()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.zeb_client_actor(self_p)
        result
      end

      # Return message pipe for asynchronous message I/O. In the high-volume case,
      # we send methods and get replies to the actor, in a synchronous manner, and
      # we send/recv high volume message data to a second pipe, the msgpipe. In   
      # the low-volume case we can do everything over the actor pipe, if traffic  
      # is never ambiguous.                                                       
      #
      # @return [::FFI::Pointer]
      def msgpipe()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.zeb_client_msgpipe(self_p)
        result
      end

      # Return true if client is currently connected, else false. Note that the   
      # client will automatically re-connect if the server dies and restarts after
      # a successful first connection.                                            
      #
      # @return [Boolean]
      def connected()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.zeb_client_connected(self_p)
        result
      end

      # Connect to server endpoint, with specified timeout in msecs (zero means wait    
      # forever). Constructor succeeds if connection is successful. The caller may      
      # specify its address.                                                            
      # Returns >= 0 if successful, -1 if interrupted.                                  
      #
      # @param endpoint [String, #to_s, nil]
      # @param timeout [Integer, #to_int, #to_i]
      # @param address [String, #to_s, nil]
      # @return [Integer]
      def connect(endpoint, timeout, address)
        raise DestroyedError unless @ptr
        self_p = @ptr
        timeout = Integer(timeout)
        result = ::Zebra::FFI.zeb_client_connect(self_p, endpoint, timeout, address)
        result
      end

      # Offer to handle particular XRAP requests, where the route matches request's     
      # resource.                                                                       
      # Returns >= 0 if successful, -1 if interrupted.                                  
      #
      # @param method [String, #to_s, nil]
      # @param route [String, #to_s, nil]
      # @return [Integer]
      def set_handler(method, route)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.zeb_client_set_handler(self_p, method, route)
        result
      end

      # No explanation                                                                  
      # Returns >= 0 if successful, -1 if interrupted.                                  
      #
      # @param timeout [Integer, #to_int, #to_i]
      # @param content [::FFI::Pointer, #to_ptr]
      # @return [Integer]
      def request(timeout, content)
        raise DestroyedError unless @ptr
        self_p = @ptr
        timeout = Integer(timeout)
        result = ::Zebra::FFI.zeb_client_request(self_p, timeout, content)
        result
      end

      # Send XRAP DELIVER message to server, takes ownership of message
      # and destroys message when done sending it.                     
      #
      # @param sender [::FFI::Pointer, #to_ptr]
      # @param content [::FFI::Pointer, #to_ptr]
      # @return [Integer]
      def deliver(sender, content)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.zeb_client_deliver(self_p, sender, content)
        result
      end

      # Receive message from server; caller destroys message when done
      #
      # @return [::FFI::Pointer]
      def recv()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.zeb_client_recv(self_p)
        result
      end

      # Return last received command. Can be one of these values:
      #     "XRAP DELIVER"                                       
      #
      # @return [String]
      def command()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.zeb_client_command(self_p)
        result
      end

      # Return last received status
      #
      # @return [Integer]
      def status()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.zeb_client_status(self_p)
        result
      end

      # Return last received reason
      #
      # @return [String]
      def reason()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.zeb_client_reason(self_p)
        result
      end

      # Return last received sender
      #
      # @return [::FFI::Pointer]
      def sender()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.zeb_client_sender(self_p)
        result
      end

      # Return last received content
      #
      # @return [::FFI::Pointer]
      def content()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::Zebra::FFI.zeb_client_content(self_p)
        result
      end

      # Enable verbose tracing (animation) of state machine activity.
      #
      # @param verbose [Boolean]
      # @return [void]
      def set_verbose(verbose)
        raise DestroyedError unless @ptr
        self_p = @ptr
        verbose = !(0==verbose||!verbose) # boolean
        result = ::Zebra::FFI.zeb_client_set_verbose(self_p, verbose)
        result
      end

      # Self test of this class.
      #
      # @param verbose [Boolean]
      # @return [void]
      def self.test(verbose)
        verbose = !(0==verbose||!verbose) # boolean
        result = ::Zebra::FFI.zeb_client_test(verbose)
        result
      end
    end
  end
end

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
