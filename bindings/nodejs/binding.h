/*  =========================================================================
    zebra Node.js binding header file

    Copyright (c) the Contributors as noted in the AUTHORS file.       
    This file is part of ZEBRA.                                        
                                                                       
    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.           

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
    =========================================================================
*/

#ifndef ZEBRA_BINDING_H_INCLUDED
#define ZEBRA_BINDING_H_INCLUDED

#define ZEBRA_BUILD_DRAFT_API

#include "../../../czmq/bindings/nodejs/binding.h"
#include "zebra.h"
#include "nan.h"

using namespace v8;
using namespace Nan;

class ZebClient: public Nan::ObjectWrap {
    public:
        static NAN_MODULE_INIT (Init);
        explicit ZebClient (void);
        explicit ZebClient (zeb_client_t *self);
        zeb_client_t *self;
    private:
        ~ZebClient ();
    static Nan::Persistent <Function> &constructor ();

    static NAN_METHOD (New);
    static NAN_METHOD (destroy);
    static NAN_METHOD (defined);
    static NAN_METHOD (_actor);
    static NAN_METHOD (_msgpipe);
    static NAN_METHOD (_connected);
    static NAN_METHOD (_connect);
    static NAN_METHOD (_set_handler);
    static NAN_METHOD (_request);
    static NAN_METHOD (_deliver);
    static NAN_METHOD (_recv);
    static NAN_METHOD (_command);
    static NAN_METHOD (_status);
    static NAN_METHOD (_reason);
    static NAN_METHOD (_sender);
    static NAN_METHOD (_content);
    static NAN_METHOD (_set_verbose);
    static NAN_METHOD (_test);
};

class ZebHandler: public Nan::ObjectWrap {
    public:
        static NAN_MODULE_INIT (Init);
        explicit ZebHandler ();
    private:
        ~ZebHandler ();
    static Nan::Persistent <Function> &constructor ();

    static NAN_METHOD (New);
    static NAN_METHOD (_add_offer);
    static NAN_METHOD (_test);
};

class XrapMsg: public Nan::ObjectWrap {
    public:
        static NAN_MODULE_INIT (Init);
        explicit XrapMsg (int id);
        explicit XrapMsg (xrap_msg_t *self);
        xrap_msg_t *self;
    private:
        ~XrapMsg ();
    static Nan::Persistent <Function> &constructor ();

    static NAN_METHOD (New);
    static NAN_METHOD (destroy);
    static NAN_METHOD (defined);
    static NAN_METHOD (_decode);
    static NAN_METHOD (_encode);
    static NAN_METHOD (_id);
    static NAN_METHOD (_set_id);
    static NAN_METHOD (_parent);
    static NAN_METHOD (_set_parent);
    static NAN_METHOD (_content_type);
    static NAN_METHOD (_set_content_type);
    static NAN_METHOD (_content_body);
    static NAN_METHOD (_set_content_body);
    static NAN_METHOD (_status_code);
    static NAN_METHOD (_set_status_code);
    static NAN_METHOD (_location);
    static NAN_METHOD (_set_location);
    static NAN_METHOD (_etag);
    static NAN_METHOD (_set_etag);
    static NAN_METHOD (_date_modified);
    static NAN_METHOD (_set_date_modified);
    static NAN_METHOD (_resource);
    static NAN_METHOD (_set_resource);
    static NAN_METHOD (_parameters);
    static NAN_METHOD (_get_parameters);
    static NAN_METHOD (_set_parameters);
    static NAN_METHOD (_parameters_string);
    static NAN_METHOD (_parameters_insert);
    static NAN_METHOD (_if_modified_since);
    static NAN_METHOD (_set_if_modified_since);
    static NAN_METHOD (_if_none_match);
    static NAN_METHOD (_set_if_none_match);
    static NAN_METHOD (_metadata);
    static NAN_METHOD (_get_metadata);
    static NAN_METHOD (_set_metadata);
    static NAN_METHOD (_metadata_string);
    static NAN_METHOD (_metadata_insert);
    static NAN_METHOD (_if_unmodified_since);
    static NAN_METHOD (_set_if_unmodified_since);
    static NAN_METHOD (_if_match);
    static NAN_METHOD (_set_if_match);
    static NAN_METHOD (_status_text);
    static NAN_METHOD (_set_status_text);
    static NAN_METHOD (_test);
};

class XrapTraffic: public Nan::ObjectWrap {
    public:
        static NAN_MODULE_INIT (Init);
        explicit XrapTraffic (void);
        explicit XrapTraffic (xrap_traffic_t *self);
        xrap_traffic_t *self;
    private:
        ~XrapTraffic ();
    static Nan::Persistent <Function> &constructor ();

    static NAN_METHOD (New);
    static NAN_METHOD (destroy);
    static NAN_METHOD (defined);
    static NAN_METHOD (_recv);
    static NAN_METHOD (_send);
    static NAN_METHOD (_print);
    static NAN_METHOD (_routing_id);
    static NAN_METHOD (_set_routing_id);
    static NAN_METHOD (_id);
    static NAN_METHOD (_set_id);
    static NAN_METHOD (_command);
    static NAN_METHOD (_address);
    static NAN_METHOD (_set_address);
    static NAN_METHOD (_timeout);
    static NAN_METHOD (_set_timeout);
    static NAN_METHOD (_content);
    static NAN_METHOD (_get_content);
    static NAN_METHOD (_set_content);
    static NAN_METHOD (_route);
    static NAN_METHOD (_set_route);
    static NAN_METHOD (_method);
    static NAN_METHOD (_set_method);
    static NAN_METHOD (_sender);
    static NAN_METHOD (_get_sender);
    static NAN_METHOD (_set_sender);
    static NAN_METHOD (_status_code);
    static NAN_METHOD (_set_status_code);
    static NAN_METHOD (_status_reason);
    static NAN_METHOD (_set_status_reason);
    static NAN_METHOD (_test);
};

#endif
