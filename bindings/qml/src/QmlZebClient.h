/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/

#ifndef QML_ZEB_CLIENT_H
#define QML_ZEB_CLIENT_H

#include <QtQml>

#include <zebra.h>
#include "qml_zebra_plugin.h"


class QmlZebClient : public QObject
{
    Q_OBJECT
    Q_PROPERTY(bool isNULL READ isNULL)
    
public:
    zeb_client_t *self;
    
    QmlZebClient() { self = NULL; }
    bool isNULL() { return self == NULL; }
    
    static QObject* qmlAttachedProperties(QObject* object); // defined in QmlZebClient.cpp
    
public slots:
    //  Return actor, when caller wants to work with multiple actors and/or
    //  input sockets asynchronously.                                      
    zactor_t *actor ();

    //  Return message pipe for asynchronous message I/O. In the high-volume case,
    //  we send methods and get replies to the actor, in a synchronous manner, and
    //  we send/recv high volume message data to a second pipe, the msgpipe. In   
    //  the low-volume case we can do everything over the actor pipe, if traffic  
    //  is never ambiguous.                                                       
    zsock_t *msgpipe ();

    //  Return true if client is currently connected, else false. Note that the   
    //  client will automatically re-connect if the server dies and restarts after
    //  a successful first connection.                                            
    bool connected ();

    //  Connect to server endpoint, with specified timeout in msecs (zero means wait    
    //  forever). Constructor succeeds if connection is successful. The caller may      
    //  specify its address.                                                            
    //  Returns >= 0 if successful, -1 if interrupted.                                  
    int connect (const QString &endpoint, uint32_t timeout, const QString &address);

    //  Offer to handle particular XRAP requests, where the route matches request's     
    //  resource.                                                                       
    //  Returns >= 0 if successful, -1 if interrupted.                                  
    int setHandler (const QString &method, const QString &route);

    //  No explanation                                                                  
    //  Returns >= 0 if successful, -1 if interrupted.                                  
    int request (uint32_t timeout, zmsg_t **content);

    //  Send XRAP DELIVER message to server, takes ownership of message
    //  and destroys message when done sending it.                     
    int deliver (zuuid_t *sender, zmsg_t **content);

    //  Receive message from server; caller destroys message when done
    zmsg_t *recv ();

    //  Return last received command. Can be one of these values:
    //      "XRAP DELIVER"                                       
    const QString command ();

    //  Return last received status
    int status ();

    //  Return last received reason
    const QString reason ();

    //  Return last received sender
    zuuid_t *sender ();

    //  Return last received content
    zmsg_t *content ();

    //  Enable verbose tracing (animation) of state machine activity.
    void setVerbose (bool verbose);
};

class QmlZebClientAttached : public QObject
{
    Q_OBJECT
    QObject* m_attached;
    
public:
    QmlZebClientAttached (QObject* attached) {
        Q_UNUSED (attached);
    };
    
public slots:
    //  Self test of this class.
    void test (bool verbose);

    //  Create a new zeb_client, return the reference if successful,   
    //  or NULL if construction failed due to lack of available memory.
    QmlZebClient *construct ();

    //  Destroy the zeb_client and free all memory used by the object.
    void destruct (QmlZebClient *qmlSelf);
};


QML_DECLARE_TYPEINFO(QmlZebClient, QML_HAS_ATTACHED_PROPERTIES)

#endif
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
