/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/

#ifndef QML_XRAP_MSG_H
#define QML_XRAP_MSG_H

#include <QtQml>

#include <zwebrap.h>
#include "qml_zwebrap_plugin.h"


class QmlXrapMsg : public QObject
{
    Q_OBJECT
    Q_PROPERTY(bool isNULL READ isNULL)
    
public:
    xrap_msg_t *self;
    
    QmlXrapMsg() { self = NULL; }
    bool isNULL() { return self == NULL; }
    
    static QObject* qmlAttachedProperties(QObject* object); // defined in QmlXrapMsg.cpp
    
public slots:
    //  Print properties of the xrap msg object.
    void print ();

    //  Parse a zmsg_t and decides whether it is xrap_msg. Returns   
    //  true if it is, false otherwise. Doesn't destroy or modify the
    //  original message.                                            
    bool isXrapMsg (zmsg_t *msg);

    //  Send the xrap_msg to the output, and destroy it
    int sendAgain (void *output);

    //  Get the xrap_msg id and printable command
    int id ();

    //  
    void setId (int id);

    //  Get/set the parent field
    const QString parent ();

    //  
    void setParent (const QString &format);

    //  Get/set the content_type field
    const QString contentType ();

    //  
    void setContentType (const QString &format);

    //  Get/set the parent field
    const QString contentBody ();

    //  
    void setContentBody (const QString &format);

    //  Get/set the status_code field
    uint16_t statusCode ();

    //  
    void setStatusCode (uint16_t statusCode);

    //  Get/set the location field
    const QString location ();

    //  
    void setLocation (const QString &format);

    //  Get/set the etag field
    const QString etag ();

    //  
    void setEtag (const QString &format);

    //  Get/set the date_modified field
    uint64_t dateModified ();

    //  
    void setDataModified (uint64_t dataModified);

    //  Get/set the resource field
    const QString resource ();

    //  
    void setResource (const QString &format);

    //  Get/set the parameters field
    const QString parametersString (const QString &key, const QString &defaultValue);

    //  
    void parametersInsert (const QString &key, const QString &format);

    //  Get/set the if_modified_since field
    uint64_t ifModifiedSince ();

    //  
    void setIfModifiedSince (uint64_t ifModifiedSince);

    //  Get/set the if_none_match field
    const QString ifNoneMatch ();

    //  
    void setIfNoneMatch (const QString &format);

    //  Get/set the parameters field
    const QString metadataString (const QString &key, const QString &defaultValue);

    //  
    void metadataInsert (const QString &key, const QString &format);

    //  Get/set the if_unmodified_since field
    uint64_t ifUnmodifiedSince ();

    //  
    void setIfUnmodifiedSince (uint64_t ifUnmodifiedSince);

    //  Get/set the if_match field
    const QString ifMatch ();

    //  
    void setIfMatch (const QString &format);

    //  Get/set the status_text field
    const QString statusText ();

    //  
    void setStatusText (const QString &format);
};

class QmlXrapMsgAttached : public QObject
{
    Q_OBJECT
    QObject* m_attached;
    
public:
    QmlXrapMsgAttached (QObject* attached) {
        Q_UNUSED (attached);
    };
    
public slots:
    //  Parse a xrap_msg from zmsg_t. Returns a new object, or NULL if
    //  the message could not be parsed, or was NULL. Destroys msg and
    //  nullifies the msg reference.                                  
    QmlXrapMsg *decode (zmsg_t **msgP);

    //  Encode xrap_msg into zmsg and destroy it. Returns a newly created       
    //  object or NULL if error. Use when not in control of sending the message.
    zmsg_t *encode (QmlXrapMsg *selfP);

    //  Receive and parse a xrap_msg from the socket. Returns new object, 
    //  or NULL if error. Will block if there's no message waiting.       
    QmlXrapMsg *recv (void *input);

    //  Receive and parse a xrap_msg from the socket. Returns new object,         
    //  or NULL either if there was no input waiting, or the recv was interrupted.
    QmlXrapMsg *recvNowait (void *input);

    //  Send the xrap_msg to the output, and destroy it
    int send (QmlXrapMsg *selfP, void *output);

    //  Self test of this class.
    void test (bool verbose);

    //  Create a new xrap_msg
    QmlXrapMsg *construct (int id);

    //  Destroy the xrap_msg
    void destruct (QmlXrapMsg *qmlSelf);
};


QML_DECLARE_TYPEINFO(QmlXrapMsg, QML_HAS_ATTACHED_PROPERTIES)

#endif
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
