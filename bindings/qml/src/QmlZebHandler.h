/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/

#ifndef QML_ZEB_HANDLER_H
#define QML_ZEB_HANDLER_H

#include <QtQml>

#include <zwebrap.h>
#include "qml_zwebrap_plugin.h"


class QmlZebHandler : public QObject
{
    Q_OBJECT
    Q_PROPERTY(bool isNULL READ isNULL)
    
public:
    zeb_handler_t *self;
    
    QmlZebHandler() { self = NULL; }
    bool isNULL() { return self == NULL; }
    
    static QObject* qmlAttachedProperties(QObject* object); // defined in QmlZebHandler.cpp
    
public slots:
    //  Add a new offer this handler will handle. Returns 0 if successful,
    //  otherwise -1.                                                     
    int addOffer (int method, const QString &uri);

    //  Add a new accept type that this handler can deliver. May be a regular
    //  expression. Returns 0 if successfull, otherwise -1.                  
    int addAccept (const QString &accept);

    //  Set a callback handler to handle incoming requests. Returns the response
    //  to be send back to the client.                                          
    void setHandleRequestFn (zeb_handler_handle_request_fn *handleRequestFn);

    //  Set a callback handler to check if provided etag matches the current one.
    //  Returns true if etags match, otherwise false.                            
    void setCheckEtagFn (zeb_handler_check_etag_fn *checkEtagFn);

    //  Set a callback handler to check if provided last_modified timestamp matches
    //  the current one. Returns true if timestamp match, otherwise false.         
    void setCheckLastModifiedFn (zeb_handler_check_last_modified_fn *lastModifiedFn);
};

class QmlZebHandlerAttached : public QObject
{
    Q_OBJECT
    QObject* m_attached;
    
public:
    QmlZebHandlerAttached (QObject* attached) {
        Q_UNUSED (attached);
    };
    
public slots:
    //  Self test of this class.
    void test (bool verbose);

    //  Create a new zeb_handler
    QmlZebHandler *construct (const QString &endpoint);

    //  Destroy the zeb_handler
    void destruct (QmlZebHandler *qmlSelf);
};


QML_DECLARE_TYPEINFO(QmlZebHandler, QML_HAS_ATTACHED_PROPERTIES)

#endif
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
