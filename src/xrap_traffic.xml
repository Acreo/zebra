<class
    name = "xrap_traffic"
    title = "zebra protocol"
    script = "zproto_codec_c"
    package_dir = "../include"
    project_header = "zebra_classes.h"
    signature = "9"
    export_macro = "ZEBRA_EXPORT"
    >
    This is a codec for the Malamute Protocol (RFC tbd)
    <include filename = "../license.xml" />

    <grammar>
    ZEBRA = open ( traffic / heartbeat ) close

    open = C:CONNECTION-OPEN ( S:OK / S:ERROR )

    traffic = xrap-traffic

    xrap-traffic    = C:XRAP-SEND ( S:OK / S:FAIL / S:ERROR )
                    / C:XRAP-OFFER
                    / C:XRAP-DELIVER S:XRAP-DELIVER

    heartbeat = C:CONNECTION-PING ( S:CONNECTION-PONG / S:ERROR )

    close = C:CONNECTION-CLOSE ( S:OK / S:ERROR )
    </grammar>

    <!-- Opening and closing the connection -->
    <message name = "CONNECTION OPEN">
        Client opens a connection to the server. Client can ask for a mailbox
        by specifying an address. If mailbox does not exist, server creates it.
        Server replies with OK or ERROR.
        <field name = "protocol" type = "string" value = "MALAMUTE">Constant "MALAMUTE"</field>
        <field name = "version" type = "number" size = "2" value = "1">Protocol version 1</field>
        <field name = "address" type = "string">Client address</field>
    </message>

    <message name = "CONNECTION PING">
        Client pings the server. Server replies with CONNECTION-PONG, or
        ERROR with status COMMAND-INVALID if the client is not recognized
        (e.g. after a server restart or network recovery).
    </message>

    <message name = "CONNECTION PONG">
        Server replies to a client connection ping.
    </message>

    <message name = "CONNECTION CLOSE">
        Client closes the connection. This is polite though not mandatory.
        Server will reply with OK or ERROR.
    </message>

    <!-- xrap queue operations -->
    <message name = "XRAP SEND">
        Client sends a xrap request to a xrap queue. Server replies with
        OK when queued, or ERROR if that failed. If the tracker is not
        empty, the client can expect a CONFIRM at some later time.
        Confirmations are asynchronous. If the message cannot be delivered
        within the specified timeout (zero means infinite), the server
        discards it and returns CONFIRM with a TIMEOUT-EXPIRED status.
        <field name = "timeout" type = "number" size = "4">Timeout, msecs, or zero</field>
        <field name = "content" type = "msg">Message body frames</field>
    </message>

    <message name = "XRAP OFFER">
        Worker client offers to handle request for a given route and method.
        An empty route is not allowed neither is an empty method. A worker
        can offer many different services at once. Server replies with OK
        or ERROR.
        <field name = "route" type = "string">Service address</field>
        <field name = "method" type = "string">Match message subjects</field>
    </message>

    <message name = "XRAP DELIVER">
        Either server delivers a xrap request to a worker client or worker
        client responds with xrap response to previous request.
        <field name = "sender" type = "uuid">Sending client address</field>
        <field name = "content" type = "msg">Message body frames</field>
    </message>

    <!-- These messages are used in all classes -->
    <message name = "OK">
        Server replies with success status. Actual status code provides more
        information. An OK always has a 2xx status code.
        <field name = "status" type = "status" />
    </message>

    <message name = "FAIL">
        Server replies with failure status. Actual status code provides more
        information. An FAIL always has 3xx or 4xx status code.
        <field name = "status" type = "status" />
    </message>

    <message name = "ERROR">
        Server replies with failure status. Actual status code provides more
        information. An ERROR always has a 5xx status code.
        <field name = "status" type = "status" />
    </message>

    <type name = "status">
        <field name = "code" type = "number" size = "2">3-digit status code</field>
        <field name = "reason" type = "string">Printable explanation</field>
    </type>

    <!-- Success codes -->
    <define name = "SUCCESS" value = "200" />
    <define name = "STORED" value = "201" />
    <define name = "DELIVERED" value = "202" />

    <!-- Temporary errors -->
    <define name = "NOT DELIVERED" value = "300" />
    <define name = "CONTENT TOO LARGE" value = "301" />
    <define name = "TIMEOUT EXPIRED" value = "302" />
    <define name = "CONNECTION REFUSED" value = "303" />

    <!-- Application errors -->
    <define name = "BAD REQUEST" value = "400" />
    <define name = "ACCESS REFUSED" value = "401" />
    <define name = "NOT FOUND" value = "404" />
    <define name = "METHOD NOT ALLOWED" value = "405" />
    <define name = "NOT ACCEPTABLE" value = "406" />
    <define name = "CONFLICT" value = "409" />
    <define name = "PRECONDITION FAILED" value = "412" />
    <define name = "RESOURCE LOCKED" value = "423" />

    <!-- System errors -->
    <define name = "COMMAND INVALID" value = "500" />
    <define name = "NOT IMPLEMENTED" value = "501" />
    <define name = "INTERNAL ERROR" value = "502" />
</class>

