<!--
    The project.xml generates build environments for:

        * android
        * autotool
        * cmake
        * mingw32
        * cygwin
        * vs2008
        * vs2010
        * vs2012
        * vs2013

    Classes are automatically added to all build environments. Further as you
    add new classes to your project you can generate skeleton header and source
    files according to http://rfc.zeromq.org/spec:21.
-->
<project
    name = "zwebrap"
    description = "Translates REST HTTP-Request into the XRAP protocol."
    script = "zproject.gsl"
    email = "zeromq-dev@lists.zeromq.org"
    >

    <!--
        Includes are processed first, so XML in included files will be
        part of the XML tree
    -->
    <include filename = "license.xml" />

    <!--
        Current version of your project.
        This will be used to package your distribution
    -->
    <version major = "1" minor = "0" patch = "0" />

    <!--
        Specify which other projects this depends on.
        These projects must be known by zproject, and the list of
        known projects is maintained in the zproject_known_projects.xml model.
        You need not specify subdependencies if they are implied.
    -->
    <use project = "czmq" min_major= "3" min_minor = "0" min_patch = "0" />
    <use project = "microhttpd" min_major= "0" min_minor = "0" min_patch = "0"
         repository = "http://ftp.gnu.org/gnu/libmicrohttpd/" test = "MHD_start_daemon" />
    <use project = "curl" min_major= "0" min_minor = "0" min_patch = "0"
         repository = "https://github.com/bagder/curl" test = "curl_easy_init" />

    <!-- Header Files
         name := The name the header file to include without file ending
    <header name = "myproject_prelude" />
    -->

    <!--
        Classes, if the class header or source file doesn't exist this will
        generate a skeletons for them.
        use private = "1" for internal classes
    -->
    <class name = "zwr_request" private = "1">Representation of a HTTP request.</class>
    <class name = "zwr_response" private = "1">Representation of a HTTP response.</class>
    <class name = "zwr_connection" private = "1">Wrapper for zwr_request and zwr_response.</class>

    <!--
        Actors, are build using the simple actor framework from czmq. If the
        actors class header or source file doesn't exist this will generate a
        skeleton for them. The generated test method of the actor will teach
        you how to use them. Also have a look at the czmq docs to learn more
        about actors.
    <actor name = "someactor" private = "1">Private actor description</actor>
    -->
    <actor name = "zwr_microhttpd" private = "1">HTTP web server backend using libmicrohttpd.</actor>
    <actor name = "zdispatcher">URL based message dispatcher.</actor>

    <!--
        Main programs built by the project
                 use private = "1" for internal tools
    <main name = "progname">Exported public tool</main>
    <main name = "progname" service = "1">Installed as system service</main>
    -->
    <bench name = "ztrie_bench">benchmark for the ztrie</bench>
    <bench name = "ztrie_vs_zhash_bench">benchmark for the ztrie</bench>

    <!--
        Models that we build using GSL.
        This will generate a 'make code' target to build the models.
    -->
    <model name = "xrap_msg" />
    <class name = "xrap_msg" />
    <!--
        If a model should be generated using a specific gsl script,
        this can be set through the script attribute:
    <model name = "hydra_msg" script = "zproto_codec_java.gsl" />

        Additional parameters to the script can be set via nested
        param elements:
    <model name = "hydra_msg" script = "zproto_codec_java.gsl">
        <param name = "root_path" value = "../main" />
    </model>
    -->

    <!-- Other source files that we need to package
    <extra name = "some_resource" />
    -->

    <!--
        Stuff that needs to be installed:

        NOTICE: If you copied this file to get started you want to delete or
                at least comment out those bin tag as they distribute the
                zproject files.

        * Linux -> /usr/local/bin
    <bin name = "zproject.gsl" />
    -->
</project>
