####  - Handler for XRAP requests

zeb_handler - Handler for XRAP requests

Please add @discuss section in ../src/zeb_handler.c.

This is the class interface:

    //  This API is a draft, and may change without notice.
    #ifdef ZEBRA_BUILD_DRAFT_API
    //  To work with zeb_handler, use the CZMQ zactor API:                      
    //                                                                          
    //  Create new zeb_handler instance, passing the broker endpoint:           
    //                                                                          
    //      zactor_t *handler = zactor_new (zeb_handler, "inproc://broker");    
    //                                                                          
    //  Destroy zeb_handler instance                                            
    //                                                                          
    //      zactor_destroy (&handler);                                          
    //                                                                          
    //  Enable verbose logging of commands and activity:                        
    //                                                                          
    //      zstr_send (handler, "VERBOSE");                                     
    //                                                                          
    //  Receive API calls from zeb_handler:                                     
    //                                                                          
    //      char *command = zstr_recv (handler);                                
    //                                                                          
    //  Check if an etag is current, MUST signal 0 if true otherwise 1.         
    //                                                                          
    //    if (streq (command, "CHECK ETAG")) {                                  
    //       char *etag = zstr_recv (handler);                                  
    //       zsock_signal (handler, 0);                                         
    //    }                                                                     
    //                                                                          
    //  Check if a last modified timestamp is current, MUST signal 0 if true    
    //  otherwise 1.                                                            
    //                                                                          
    //    if (streq (command, "CHECK LAST MODIFIED")) {                         
    //       uint64_t last_modified;                                            
    //       zsock_brecv (handler, "8", &last_modified);                        
    //       zsock_signal (handler, 0);                                         
    //    }                                                                     
    //                                                                          
    //  Handle incomming request from clients. MUST return a response.          
    //                                                                          
    //  if (streq (command, "HANDLE REQUEST")) {                                
    //      zmsg_t *request = zmsg_recv (handle);                               
    //      xrap_msg_t *xrequest = xrap_msg_decode (&request);                  
    //      zmsg_t *response = xrap_msg_encode (&xrequest);                     
    //      zmsg_send (&response, handler);                                     
    //  }                                                                       
    //                                                                          
    //  This is the handler actor which runs in its own thread and polls its two
    //  sockets to process incoming messages.                                   
    ZEBRA_EXPORT void
        zeb_handler (zsock_t *pipe, void *args);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Add a new offer this handler will handle. Returns 0 if successful,       
    //  otherwise -1.                                                            
    //  The content type parameter is optional and is used to                    
    //  filter requests upon their requested (GET) or provided (POST/PUT)        
    //  content's type. The content type parameter may be a regex which is       
    //  useful for GET offers that can supply resources in different formats.    
    //  If the client did request multiple content types then the first match    
    //  will be chosen and applied to the request. All other content types are   
    //  drooped. If the request's content type does not match it is automatically
    //  rejected with the error code 406 (Not acceptable).                       
    ZEBRA_EXPORT int
        zeb_handler_add_offer (zactor_t *self, int method, const char *uri, const char *content_type);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Self test of this class.
    ZEBRA_EXPORT void
        zeb_handler_test (bool verbose);
    
    #endif // ZEBRA_BUILD_DRAFT_API

This is the class self test code:

    //  Simple create/destroy test
    
    //  Start a server to test against, and bind to endpoint
    zactor_t *server = zactor_new (zeb_broker, "zeb_client_test");
    if (verbose)
        zstr_send (server, "VERBOSE");
    zstr_sendx (server, "LOAD", "src/zeb_client.cfg", NULL);
    
    //  Create a client and connect it to the server
    zeb_client_t *client = zeb_client_new ();
    int rc = zeb_client_connect (client, "tcp://127.0.0.1:9999", 1000, "client");
    assert (rc == 0);
    assert (zeb_client_connected (client) == true);
    
    //  Create a handler
    zactor_t *handler = zactor_new (zeb_handler, (void *) "tcp://127.0.0.1:9999");
    assert (handler);
    
    //  Offer a service
    rc = zeb_handler_add_offer (handler, XRAP_MSG_GET, "/dummy", "application/(xml|json)");
    assert (rc == 0);
    rc = zeb_handler_add_offer (handler, XRAP_MSG_PUT, "/dummy", "application/(xml|json)");
    assert (rc == 0);
    
    //  Provide Rubbish Offering
    rc = zeb_handler_add_offer (handler, XRAP_MSG_GET, "/dummy", NULL);
    assert (rc == -1);
    
    //  ================================
    //  GET Tests
    
    //  1.1 Send Request
    xrap_msg_t *xmsg = xrap_msg_new (XRAP_MSG_GET);
    xrap_msg_set_resource (xmsg, "%s", "/dummy");
    xrap_msg_set_content_type (xmsg, "application/xml");
    zmsg_t *msg = xrap_msg_encode (&xmsg);
    rc = zeb_client_request (client, 0, &msg);
    assert (rc == 0);
    
    //  1.2 Receive request and Echo response
    char *command;
    zsock_recv (handler, "sm", &command, &msg);
    assert (streq (command, "HANDLE REQUEST"));
    zstr_free (&command);
    zmsg_send (&msg, handler);
    
    //  1.3 Receive Response (is echo)
    msg = zeb_client_recv (client);
    xmsg = xrap_msg_decode (&msg);
    assert (xrap_msg_id (xmsg) == XRAP_MSG_GET);
    assert (streq (xrap_msg_resource (xmsg), "/dummy"));
    assert (streq (xrap_msg_content_type (xmsg), "application/xml"));
    xrap_msg_destroy (&xmsg);
    zuuid_t *sender = zeb_client_sender (client);
    zuuid_destroy (&sender);
    
    //  2.1 Send Request with default Firefox accept header
    xmsg = xrap_msg_new (XRAP_MSG_GET);
    xrap_msg_set_resource (xmsg, "%s", "/dummy");
    xrap_msg_set_content_type (xmsg,
            "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
    msg = xrap_msg_encode (&xmsg);
    rc = zeb_client_request (client, 0, &msg);
    assert (rc == 0);
    
    //  2.2 Receive request and Echo response
    zsock_recv (handler, "sm", &command, &msg);
    assert (streq (command, "HANDLE REQUEST"));
    zstr_free (&command);
    zmsg_send (&msg, handler);
    
    //  2.3 Receive Response (is echo)
    msg = zeb_client_recv (client);
    xmsg = xrap_msg_decode (&msg);
    assert (xrap_msg_id (xmsg) == XRAP_MSG_GET);
    assert (streq (xrap_msg_resource (xmsg), "/dummy"));
    //  zeb_handler choose the first matching accept type
    assert (streq (xrap_msg_content_type (xmsg), "application/xml"));
    xrap_msg_destroy (&xmsg);
    sender = zeb_client_sender (client);
    zuuid_destroy (&sender);
    
    //  3.1 Send Request without ACCEPT
    xmsg = xrap_msg_new (XRAP_MSG_GET);
    xrap_msg_set_resource (xmsg, "%s", "/dummy");
    msg = xrap_msg_encode (&xmsg);
    rc = zeb_client_request (client, 0, &msg);
    assert (rc == 0);
    
    //  3.2 Receive Request without ACCEPT
    msg = zeb_client_recv (client);
    xmsg = xrap_msg_decode (&msg);
    assert (xrap_msg_id (xmsg) == XRAP_MSG_ERROR);
    assert (xrap_msg_status_code (xmsg) == XRAP_TRAFFIC_NOT_ACCEPTABLE);
    xrap_msg_destroy (&xmsg);
    sender = zeb_client_sender (client);
    zuuid_destroy (&sender);
    
    //  4.1 Send Request with conditionals (not changed)
    xmsg = xrap_msg_new (XRAP_MSG_GET);
    xrap_msg_set_resource (xmsg, "%s", "/dummy");
    xrap_msg_set_content_type (xmsg, "application/json");
    xrap_msg_set_if_none_match (xmsg, "MATCH");
    xrap_msg_set_if_modified_since (xmsg, 10);
    msg = xrap_msg_encode (&xmsg);
    rc = zeb_client_request (client, 0, &msg);
    assert (rc == 0);
    
    //  4.2 Check etag (match)
    char *etag;
    zsock_recv (handler, "ss", &command, &etag);
    assert (streq (command, "CHECK ETAG"));
    zstr_free (&command);
    assert (streq (etag, "MATCH"));
    zstr_free (&etag);
    zsock_signal (handler, 0);
    
    //  4.3 Check last modified (not modified)
    uint64_t last_modified;
    zsock_recv (handler, "s8", &command, &last_modified);
    assert (streq (command, "CHECK LAST MODIFIED"));
    zstr_free (&command);
    zsock_signal (handler, 0);
    
    //  4.4 Receive Request with conditionals
    msg = zeb_client_recv (client);
    xmsg = xrap_msg_decode (&msg);
    assert (xrap_msg_id (xmsg) == XRAP_MSG_GET_EMPTY);
    xrap_msg_destroy (&xmsg);
    sender = zeb_client_sender (client);
    zuuid_destroy (&sender);
    
    //  5.1 Send Request with conditionals (changed)
    xmsg = xrap_msg_new (XRAP_MSG_GET);
    xrap_msg_set_resource (xmsg, "%s", "/dummy");
    xrap_msg_set_content_type (xmsg, "application/json");
    xrap_msg_set_if_none_match (xmsg, "NONE MATCH");
    xrap_msg_set_if_modified_since (xmsg, 20);
    msg = xrap_msg_encode (&xmsg);
    rc = zeb_client_request (client, 0, &msg);
    assert (rc == 0);
    
    //  5.2 Check etag (none match)
    zsock_recv (handler, "ss", &command, &etag);
    assert (streq (command, "CHECK ETAG"));
    zstr_free (&command);
    assert (streq (etag, "NONE MATCH"));
    zstr_free (&etag);
    zsock_signal (handler, 1);
    
    //  5.3 Check last modified (modified)
    zsock_recv (handler, "s8", &command, &last_modified);
    assert (streq (command, "CHECK LAST MODIFIED"));
    zstr_free (&command);
    assert (last_modified == 20);
    zsock_signal (handler, 1);
    
    //  5.4 Receive request and Echo response
    zsock_recv (handler, "sm", &command, &msg);
    assert (streq (command, "HANDLE REQUEST"));
    zstr_free (&command);
    zmsg_send (&msg, handler);
    
    //  5.5 Receive response with conditionals
    msg = zeb_client_recv (client);
    xmsg = xrap_msg_decode (&msg);
    assert (xrap_msg_id (xmsg) == XRAP_MSG_GET);
    assert (streq (xrap_msg_resource (xmsg), "/dummy"));
    assert (streq (xrap_msg_content_type (xmsg), "application/json"));
    xrap_msg_destroy (&xmsg);
    sender = zeb_client_sender (client);
    zuuid_destroy (&sender);
    
    //  ================================
    //  PUT Tests
    
    //  1.1 Send Request
    xmsg = xrap_msg_new (XRAP_MSG_PUT);
    xrap_msg_set_resource (xmsg, "%s", "/dummy");
    xrap_msg_set_content_type (xmsg, "application/xml");
    xrap_msg_set_content_body (xmsg, "application/xml");
    msg = xrap_msg_encode (&xmsg);
    rc = zeb_client_request (client, 0, &msg);
    assert (rc == 0);
    
    //  1.2 Receive request and Echo response
    zsock_recv (handler, "sm", &command, &msg);
    assert (streq (command, "HANDLE REQUEST"));
    zstr_free (&command);
    zmsg_send (&msg, handler);
    
    //  1.3 Receive response (is echo)
    msg = zeb_client_recv (client);
    xmsg = xrap_msg_decode (&msg);
    assert (xrap_msg_id (xmsg) == XRAP_MSG_PUT);
    assert (streq (xrap_msg_resource (xmsg), "/dummy"));
    assert (streq (xrap_msg_content_type (xmsg), "application/xml"));
    assert (streq (xrap_msg_content_body (xmsg), "application/xml"));
    xrap_msg_destroy (&xmsg);
    sender = zeb_client_sender (client);
    zuuid_destroy (&sender);
    
    //  2.1 Send Request with conditionals (update, both)
    xmsg = xrap_msg_new (XRAP_MSG_PUT);
    xrap_msg_set_resource (xmsg, "%s", "/dummy");
    xrap_msg_set_content_type (xmsg, "application/json");
    xrap_msg_set_if_match (xmsg, "MATCH");
    xrap_msg_set_if_unmodified_since (xmsg, 10);
    msg = xrap_msg_encode (&xmsg);
    rc = zeb_client_request (client, 0, &msg);
    assert (rc == 0);
    
    //  2.2 Check etag (match)
    zsock_recv (handler, "ss", &command, &etag);
    assert (streq (command, "CHECK ETAG"));
    zstr_free (&command);
    assert (streq (etag, "MATCH"));
    zstr_free (&etag);
    zsock_signal (handler, 0);
    
    //  2.3 Check last modified (not modified)
    zsock_recv (handler, "s8", &command, &last_modified);
    assert (streq (command, "CHECK LAST MODIFIED"));
    zstr_free (&command);
    zsock_signal (handler, 0);
    
    //  2.4 Receive request and Echo response
    zsock_recv (handler, "sm", &command, &msg);
    assert (streq (command, "HANDLE REQUEST"));
    zstr_free (&command);
    zmsg_send (&msg, handler);
    
    //  2.5 Receive response with conditionals (update, both)
    msg = zeb_client_recv (client);
    xmsg = xrap_msg_decode (&msg);
    assert (xrap_msg_id (xmsg) == XRAP_MSG_PUT);
    assert (streq (xrap_msg_resource (xmsg), "/dummy"));
    assert (streq (xrap_msg_content_type (xmsg), "application/json"));
    xrap_msg_destroy (&xmsg);
    sender = zeb_client_sender (client);
    zuuid_destroy (&sender);
    
    //  3.1 Send Request with conditionals (update, etag)
    xmsg = xrap_msg_new (XRAP_MSG_PUT);
    xrap_msg_set_resource (xmsg, "%s", "/dummy");
    xrap_msg_set_content_type (xmsg, "application/json");
    xrap_msg_set_if_match (xmsg, "MATCH");
    msg = xrap_msg_encode (&xmsg);
    rc = zeb_client_request (client, 0, &msg);
    assert (rc == 0);
    
    //  3.2 Check etag (match)
    zsock_recv (handler, "ss", &command, &etag);
    assert (streq (command, "CHECK ETAG"));
    zstr_free (&command);
    assert (streq (etag, "MATCH"));
    zstr_free (&etag);
    zsock_signal (handler, 0);
    
    //  3.3 Receive request and Echo response
    zsock_recv (handler, "sm", &command, &msg);
    assert (streq (command, "HANDLE REQUEST"));
    zstr_free (&command);
    zmsg_send (&msg, handler);
    
    //  3.4 Receive response with conditionals (update, etag)
    msg = zeb_client_recv (client);
    xmsg = xrap_msg_decode (&msg);
    assert (xrap_msg_id (xmsg) == XRAP_MSG_PUT);
    xrap_msg_destroy (&xmsg);
    sender = zeb_client_sender (client);
    zuuid_destroy (&sender);
    
    //  4.1 Send Request with conditionals (update, last_modified)
    xmsg = xrap_msg_new (XRAP_MSG_PUT);
    xrap_msg_set_resource (xmsg, "%s", "/dummy");
    xrap_msg_set_content_type (xmsg, "application/json");
    xrap_msg_set_if_unmodified_since (xmsg, 10);
    msg = xrap_msg_encode (&xmsg);
    rc = zeb_client_request (client, 0, &msg);
    assert (rc == 0);
    
    //  4.2 Check last modified (not modified)
    zsock_recv (handler, "s8", &command, &last_modified);
    assert (streq (command, "CHECK LAST MODIFIED"));
    zstr_free (&command);
    zsock_signal (handler, 0);
    
    //  4.3 Receive request and Echo response
    zsock_recv (handler, "sm", &command, &msg);
    assert (streq (command, "HANDLE REQUEST"));
    zstr_free (&command);
    zmsg_send (&msg, handler);
    
    //  4.4 Receive response with conditionals (update, last_modified)
    msg = zeb_client_recv (client);
    xmsg = xrap_msg_decode (&msg);
    assert (xrap_msg_id (xmsg) == XRAP_MSG_PUT);
    xrap_msg_destroy (&xmsg);
    sender = zeb_client_sender (client);
    zuuid_destroy (&sender);
    
    //  5.1 Send Request with conditionals (no update)
    xmsg = xrap_msg_new (XRAP_MSG_PUT);
    xrap_msg_set_resource (xmsg, "%s", "/dummy");
    xrap_msg_set_content_type (xmsg, "application/json");
    xrap_msg_set_if_match (xmsg, "NONE MATCH");
    xrap_msg_set_if_unmodified_since (xmsg, 20);
    msg = xrap_msg_encode (&xmsg);
    rc = zeb_client_request (client, 0, &msg);
    assert (rc == 0);
    
    //  5.2 Check etag (none match)
    zsock_recv (handler, "ss", &command, &etag);
    assert (streq (command, "CHECK ETAG"));
    zstr_free (&command);
    assert (streq (etag, "NONE MATCH"));
    zstr_free (&etag);
    zsock_signal (handler, 1);
    
    //  5.3 Check last modified (modified)
    zsock_recv (handler, "s8", &command, &last_modified);
    assert (streq (command, "CHECK LAST MODIFIED"));
    zstr_free (&command);
    assert (last_modified == 20);
    zsock_signal (handler, 1);
    
    //  5.4 Receive Request with conditionals (no update)
    msg = zeb_client_recv (client);
    xmsg = xrap_msg_decode (&msg);
    assert (xrap_msg_id (xmsg) == XRAP_MSG_ERROR);
    assert (xrap_msg_status_code (xmsg) == XRAP_TRAFFIC_PRECONDITION_FAILED);
    xrap_msg_destroy (&xmsg);
    sender = zeb_client_sender (client);
    zuuid_destroy (&sender);
    
    //  ================================
    //  Invalid Tests
    
    //  1.1 Send Request
    xmsg = xrap_msg_new (XRAP_MSG_GET_EMPTY);
    msg = xrap_msg_encode (&xmsg);
    rc = zeb_client_request (client, 0, &msg);
    assert (rc == XRAP_TRAFFIC_NOT_FOUND);
    
    //  Cleanup
    zeb_client_destroy (&client);
    zactor_destroy (&handler);
    
    //  Done, shut down
    zactor_destroy (&server);

