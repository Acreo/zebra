#### xrap_traffic - zebra protocol

xrap_traffic - zebra protocol

Please add @discuss section in ../src/xrap_traffic.c.

This is the class interface:

    //  This API is a draft, and may change without notice.
    #ifdef ZEBRA_BUILD_DRAFT_API
    #define XRAP_TRAFFIC_SUCCESS 200            // 
    #define XRAP_TRAFFIC_STORED 201             // 
    #define XRAP_TRAFFIC_DELIVERED 202          // 
    #define XRAP_TRAFFIC_NOT_DELIVERED 300      // 
    #define XRAP_TRAFFIC_CONTENT_TOO_LARGE 301  // 
    #define XRAP_TRAFFIC_TIMEOUT_EXPIRED 302    // 
    #define XRAP_TRAFFIC_CONNECTION_REFUSED 303  // 
    #define XRAP_TRAFFIC_BAD_REQUEST 400        // 
    #define XRAP_TRAFFIC_ACCESS_REFUSED 401     // 
    #define XRAP_TRAFFIC_NOT_FOUND 404          // 
    #define XRAP_TRAFFIC_METHOD_NOT_ALLOWED 405  // 
    #define XRAP_TRAFFIC_NOT_ACCEPTABLE 406     // 
    #define XRAP_TRAFFIC_CONFLICT 409           // 
    #define XRAP_TRAFFIC_PRECONDITION_FAILED 412  // 
    #define XRAP_TRAFFIC_RESOURCE_LOCKED 423    // 
    #define XRAP_TRAFFIC_COMMAND_INVALID 500    // 
    #define XRAP_TRAFFIC_NOT_IMPLEMENTED 501    // 
    #define XRAP_TRAFFIC_INTERNAL_ERROR 502     // 
    #define XRAP_TRAFFIC_CONNECTION_OPEN 1      // 
    #define XRAP_TRAFFIC_CONNECTION_PING 2      // 
    #define XRAP_TRAFFIC_CONNECTION_PONG 3      // 
    #define XRAP_TRAFFIC_CONNECTION_CLOSE 4     // 
    #define XRAP_TRAFFIC_XRAP_SEND 5            // 
    #define XRAP_TRAFFIC_XRAP_OFFER 6           // 
    #define XRAP_TRAFFIC_XRAP_DELIVER 7         // 
    #define XRAP_TRAFFIC_OK 8                   // 
    #define XRAP_TRAFFIC_FAIL 9                 // 
    #define XRAP_TRAFFIC_ERROR 10               // 
    
    //  *** Draft method, for development use, may change without warning ***
    //  Create a new empty xrap_traffic
    ZEBRA_EXPORT xrap_traffic_t *
        xrap_traffic_new (void);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Destroy a xrap_traffic instance
    ZEBRA_EXPORT void
        xrap_traffic_destroy (xrap_traffic_t **self_p);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Receive a xrap_traffic from the socket. Returns 0 if OK, -1 if
    //  there was an error. Blocks if there is no message waiting.    
    ZEBRA_EXPORT int
        xrap_traffic_recv (xrap_traffic_t *self, zsock_t *input);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Send the xrap_traffic to the output socket, does not destroy it
    ZEBRA_EXPORT int
        xrap_traffic_send (xrap_traffic_t *self, zsock_t *output);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Print contents of message to stdout
    ZEBRA_EXPORT void
        xrap_traffic_print (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the message routing id, as a frame
    ZEBRA_EXPORT zframe_t *
        xrap_traffic_routing_id (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the message routing id from a frame
    ZEBRA_EXPORT void
        xrap_traffic_set_routing_id (xrap_traffic_t *self, zframe_t *routing_id);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the xrap_traffic message id
    ZEBRA_EXPORT int
        xrap_traffic_id (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the xrap_traffic message id
    ZEBRA_EXPORT void
        xrap_traffic_set_id (xrap_traffic_t *self, int id);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the xrap_traffic message id as printable text
    ZEBRA_EXPORT const char *
        xrap_traffic_command (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the address field
    ZEBRA_EXPORT const char *
        xrap_traffic_address (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the address field
    ZEBRA_EXPORT void
        xrap_traffic_set_address (xrap_traffic_t *self, const char *address);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the timeout field
    ZEBRA_EXPORT uint32_t
        xrap_traffic_timeout (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the timeout field
    ZEBRA_EXPORT void
        xrap_traffic_set_timeout (xrap_traffic_t *self, uint32_t timeout);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get a copy of the content field
    ZEBRA_EXPORT zmsg_t *
        xrap_traffic_content (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the content field and transfer ownership to caller
    ZEBRA_EXPORT zmsg_t *
        xrap_traffic_get_content (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  
    ZEBRA_EXPORT void
        xrap_traffic_set_content (xrap_traffic_t *self, zmsg_t **content_p);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the route field
    ZEBRA_EXPORT const char *
        xrap_traffic_route (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the route field
    ZEBRA_EXPORT void
        xrap_traffic_set_route (xrap_traffic_t *self, const char *route);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the method field
    ZEBRA_EXPORT const char *
        xrap_traffic_method (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the method field
    ZEBRA_EXPORT void
        xrap_traffic_set_method (xrap_traffic_t *self, const char *method);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the sender field
    ZEBRA_EXPORT zuuid_t *
        xrap_traffic_sender (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the sender field and transfer ownership to caller
    ZEBRA_EXPORT zuuid_t *
        xrap_traffic_get_sender (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the sender field
    ZEBRA_EXPORT void
        xrap_traffic_set_sender (xrap_traffic_t *self, zuuid_t *sender_p);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the status_code field
    ZEBRA_EXPORT uint16_t
        xrap_traffic_status_code (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the status_code field
    ZEBRA_EXPORT void
        xrap_traffic_set_status_code (xrap_traffic_t *self, uint16_t status_code);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Get the status_reason field
    ZEBRA_EXPORT const char *
        xrap_traffic_status_reason (xrap_traffic_t *self);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Set the status_reason field
    ZEBRA_EXPORT void
        xrap_traffic_set_status_reason (xrap_traffic_t *self, const char *status_reason);
    
    //  *** Draft method, for development use, may change without warning ***
    //  Self test of this class.
    ZEBRA_EXPORT void
        xrap_traffic_test (bool verbose);
    
    #endif // ZEBRA_BUILD_DRAFT_API

This is the class self test code:

    //  Simple create/destroy test
    xrap_traffic_t *self = xrap_traffic_new ();
    assert (self);
    xrap_traffic_destroy (&self);
    //  Create pair of sockets we can send through
    //  We must bind before connect if we wish to remain compatible with ZeroMQ < v4
    zsock_t *output = zsock_new (ZMQ_DEALER);
    assert (output);
    int rc = zsock_bind (output, "inproc://selftest-xrap_traffic");
    assert (rc == 0);
    
    zsock_t *input = zsock_new (ZMQ_ROUTER);
    assert (input);
    rc = zsock_connect (input, "inproc://selftest-xrap_traffic");
    assert (rc == 0);
    
    
    //  Encode/send/decode and verify each message type
    int instance;
    self = xrap_traffic_new ();
    xrap_traffic_set_id (self, XRAP_TRAFFIC_CONNECTION_OPEN);
    
    xrap_traffic_set_address (self, "Life is short but Now lasts for ever");
    //  Send twice
    xrap_traffic_send (self, output);
    xrap_traffic_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        xrap_traffic_recv (self, input);
        assert (xrap_traffic_routing_id (self));
        assert (streq (xrap_traffic_address (self), "Life is short but Now lasts for ever"));
    }
    xrap_traffic_set_id (self, XRAP_TRAFFIC_CONNECTION_PING);
    
    //  Send twice
    xrap_traffic_send (self, output);
    xrap_traffic_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        xrap_traffic_recv (self, input);
        assert (xrap_traffic_routing_id (self));
    }
    xrap_traffic_set_id (self, XRAP_TRAFFIC_CONNECTION_PONG);
    
    //  Send twice
    xrap_traffic_send (self, output);
    xrap_traffic_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        xrap_traffic_recv (self, input);
        assert (xrap_traffic_routing_id (self));
    }
    xrap_traffic_set_id (self, XRAP_TRAFFIC_CONNECTION_CLOSE);
    
    //  Send twice
    xrap_traffic_send (self, output);
    xrap_traffic_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        xrap_traffic_recv (self, input);
        assert (xrap_traffic_routing_id (self));
    }
    xrap_traffic_set_id (self, XRAP_TRAFFIC_XRAP_SEND);
    
    xrap_traffic_set_timeout (self, 123);
    zmsg_t *xrap_send_content = zmsg_new ();
    xrap_traffic_set_content (self, &xrap_send_content);
    zmsg_addstr (xrap_traffic_content (self), "Captcha Diem");
    //  Send twice
    xrap_traffic_send (self, output);
    xrap_traffic_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        xrap_traffic_recv (self, input);
        assert (xrap_traffic_routing_id (self));
        assert (xrap_traffic_timeout (self) == 123);
        assert (zmsg_size (xrap_traffic_content (self)) == 1);
        char *content = zmsg_popstr (xrap_traffic_content (self));
        assert (streq (content, "Captcha Diem"));
        zstr_free (&content);
        if (instance == 1)
            zmsg_destroy (&xrap_send_content);
    }
    xrap_traffic_set_id (self, XRAP_TRAFFIC_XRAP_OFFER);
    
    xrap_traffic_set_route (self, "Life is short but Now lasts for ever");
    xrap_traffic_set_method (self, "Life is short but Now lasts for ever");
    //  Send twice
    xrap_traffic_send (self, output);
    xrap_traffic_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        xrap_traffic_recv (self, input);
        assert (xrap_traffic_routing_id (self));
        assert (streq (xrap_traffic_route (self), "Life is short but Now lasts for ever"));
        assert (streq (xrap_traffic_method (self), "Life is short but Now lasts for ever"));
    }
    xrap_traffic_set_id (self, XRAP_TRAFFIC_XRAP_DELIVER);
    
    zuuid_t *xrap_deliver_sender = zuuid_new ();
    xrap_traffic_set_sender (self, xrap_deliver_sender);
    zmsg_t *xrap_deliver_content = zmsg_new ();
    xrap_traffic_set_content (self, &xrap_deliver_content);
    zmsg_addstr (xrap_traffic_content (self), "Captcha Diem");
    //  Send twice
    xrap_traffic_send (self, output);
    xrap_traffic_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        xrap_traffic_recv (self, input);
        assert (xrap_traffic_routing_id (self));
        assert (zuuid_eq (xrap_deliver_sender, zuuid_data (xrap_traffic_sender (self))));
        if (instance == 1)
            zuuid_destroy (&xrap_deliver_sender);
        assert (zmsg_size (xrap_traffic_content (self)) == 1);
        char *content = zmsg_popstr (xrap_traffic_content (self));
        assert (streq (content, "Captcha Diem"));
        zstr_free (&content);
        if (instance == 1)
            zmsg_destroy (&xrap_deliver_content);
    }
    xrap_traffic_set_id (self, XRAP_TRAFFIC_OK);
    
    xrap_traffic_set_status_code (self, 123);
    xrap_traffic_set_status_reason (self, "Life is short but Now lasts for ever");
    //  Send twice
    xrap_traffic_send (self, output);
    xrap_traffic_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        xrap_traffic_recv (self, input);
        assert (xrap_traffic_routing_id (self));
        assert (xrap_traffic_status_code (self) == 123);
        assert (streq (xrap_traffic_status_reason (self), "Life is short but Now lasts for ever"));
    }
    xrap_traffic_set_id (self, XRAP_TRAFFIC_FAIL);
    
    xrap_traffic_set_status_code (self, 123);
    xrap_traffic_set_status_reason (self, "Life is short but Now lasts for ever");
    //  Send twice
    xrap_traffic_send (self, output);
    xrap_traffic_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        xrap_traffic_recv (self, input);
        assert (xrap_traffic_routing_id (self));
        assert (xrap_traffic_status_code (self) == 123);
        assert (streq (xrap_traffic_status_reason (self), "Life is short but Now lasts for ever"));
    }
    xrap_traffic_set_id (self, XRAP_TRAFFIC_ERROR);
    
    xrap_traffic_set_status_code (self, 123);
    xrap_traffic_set_status_reason (self, "Life is short but Now lasts for ever");
    //  Send twice
    xrap_traffic_send (self, output);
    xrap_traffic_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        xrap_traffic_recv (self, input);
        assert (xrap_traffic_routing_id (self));
        assert (xrap_traffic_status_code (self) == 123);
        assert (streq (xrap_traffic_status_reason (self), "Life is short but Now lasts for ever"));
    }
    
    xrap_traffic_destroy (&self);
    zsock_destroy (&input);
    zsock_destroy (&output);

