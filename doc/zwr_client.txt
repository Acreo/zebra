zwr_client(3)
=============

NAME
----
zwr_client - ZWebRap Client

SYNOPSIS
--------
----
//  Create a new zwr_client, return the reference if successful, or NULL
//  if construction failed due to lack of available memory.
ZWEBRAP_EXPORT zwr_client_t *
    zwr_client_new (void);

//  Destroy the zwr_client and free all memory used by the object.
ZWEBRAP_EXPORT void
    zwr_client_destroy (zwr_client_t **self_p);

//  Return actor, when caller wants to work with multiple actors and/or
//  input sockets asynchronously.
ZWEBRAP_EXPORT zactor_t *
    zwr_client_actor (zwr_client_t *self);

//  Return message pipe for asynchronous message I/O. In the high-volume case,
//  we send methods and get replies to the actor, in a synchronous manner, and
//  we send/recv high volume message data to a second pipe, the msgpipe. In
//  the low-volume case we can do everything over the actor pipe, if traffic
//  is never ambiguous.
ZWEBRAP_EXPORT zsock_t *
    zwr_client_msgpipe (zwr_client_t *self);

//  Return true if client is currently connected, else false. Note that the
//  client will automatically re-connect if the server dies and restarts after
//  a successful first connection.
ZWEBRAP_EXPORT bool
    zwr_client_connected (zwr_client_t *self);

//  Connect to server endpoint, with specified timeout in msecs (zero means wait    
//  forever). Constructor succeeds if connection is successful. The caller may      
//  specify its address.                                                            
//  Returns >= 0 if successful, -1 if interrupted.
ZWEBRAP_EXPORT int 
    zwr_client_connect (zwr_client_t *self, const char *endpoint, uint32_t timeout, const char *address);

//  Offer to handle particular XRAP requests, where the route matches request's     
//  resource.                                                                       
//  Returns >= 0 if successful, -1 if interrupted.
ZWEBRAP_EXPORT int 
    zwr_client_set_handler (zwr_client_t *self, const char *method, const char *route);

//  No explanation                                                                  
//  Returns >= 0 if successful, -1 if interrupted.
ZWEBRAP_EXPORT int 
    zwr_client_request (zwr_client_t *self, uint32_t timeout, zmsg_t **content_p);

//  Send XRAP DELIVER message to server, takes ownership of message
//  and destroys message when done sending it.
ZWEBRAP_EXPORT int
    zwr_client_deliver (zwr_client_t *self, zuuid_t *sender, zmsg_t **content_p);

//  Receive message from server; caller destroys message when done
ZWEBRAP_EXPORT zmsg_t *
    zwr_client_recv (zwr_client_t *self);

//  Return last received command. Can be one of these values:
//      "XRAP DELIVER"
ZWEBRAP_EXPORT const char *
    zwr_client_command (zwr_client_t *self);

//  Return last received status
ZWEBRAP_EXPORT int 
    zwr_client_status (zwr_client_t *self);

//  Return last received reason
ZWEBRAP_EXPORT const char *
    zwr_client_reason (zwr_client_t *self);

//  Return last received sender
ZWEBRAP_EXPORT zuuid_t *
    zwr_client_sender (zwr_client_t *self);

//  Return last received content
ZWEBRAP_EXPORT zmsg_t *
    zwr_client_content (zwr_client_t *self);

//  Self test of this class
ZWEBRAP_EXPORT void
    zwr_client_test (bool verbose);

//  To enable verbose tracing (animation) of zwr_client instances, set
//  this to true. This lets you trace from and including construction.
ZWEBRAP_EXPORT extern volatile int
    zwr_client_verbose;
----

DESCRIPTION
-----------

Description of class for man page.

Detailed discussion of the class, if any.

EXAMPLE
-------
.From zwr_client_test method
----
zwr_client_verbose = verbose;

//  Start a server to test against, and bind to endpoint
zactor_t *server = zactor_new (zwr_server, "zwr_client_test");
if (verbose)
    zstr_send (server, "VERBOSE");
zstr_sendx (server, "LOAD", "src/zwr_client.cfg", NULL);

//  Create clients for testing
zwr_client_t *client = zwr_client_new ();
zwr_client_t *handler = zwr_client_new ();
assert (client);
assert (handler);

//  Connect clients to server
int rc = zwr_client_connect (client, "tcp://127.0.0.1:9999", 1000, "client");
assert (rc == 0);
assert (zwr_client_connected (client) == true);

rc = zwr_client_connect (handler, "tcp://127.0.0.1:9999", 1000, "handler");
assert (rc == 0);
assert (zwr_client_connected (handler) == true);

//  Provide Rubbish Offering
rc = zwr_client_set_handler (handler, "GET", "///");
assert (rc != 0);
assert (zwr_client_status (handler) == XRAP_TRAFFIC_CONFLICT);

//  Provide Offering
rc = zwr_client_set_handler (handler, "GET", "/foo/{[^/]}");
assert (rc == 0);

//  Send Request
xrap_msg_t *xmsg = xrap_msg_new (XRAP_MSG_GET);
xrap_msg_set_resource (xmsg, "%s", "/foo/bar");
zmsg_t *msg = xrap_msg_encode (&xmsg);
rc = zwr_client_request (client, 0, &msg);
assert (rc == 0);

//  Receive Request
msg = zwr_client_recv (handler);
xmsg = xrap_msg_decode (&msg);
assert (xrap_msg_id (xmsg) == XRAP_MSG_GET);
assert (streq ("/foo/bar", xrap_msg_resource (xmsg)));
xrap_msg_destroy (&xmsg);

//  Send Response
xmsg = xrap_msg_new (XRAP_MSG_GET_OK);
xrap_msg_set_status_code (xmsg, 200);
xrap_msg_set_content_type (xmsg, "text/hello");
xrap_msg_set_content_body (xmsg, "Hello World!");
msg = xrap_msg_encode (&xmsg);
zwr_client_deliver (handler, handler->sender, &msg);
zuuid_t *sender = zwr_client_sender (handler);
zuuid_destroy (&sender);

//  Receive Response
msg = zwr_client_recv (client);
xmsg = xrap_msg_decode (&msg);
assert (xrap_msg_id (xmsg) == XRAP_MSG_GET_OK);
assert (xrap_msg_status_code (xmsg) == 200);
assert (streq ("text/hello", xrap_msg_content_type (xmsg)));
assert (streq ("Hello World!", xrap_msg_content_body (xmsg)));
xrap_msg_destroy (&xmsg);
sender = zwr_client_sender (client);
zuuid_destroy (&sender);

//  Send Request 2
xmsg = xrap_msg_new (XRAP_MSG_GET);
xrap_msg_set_resource (xmsg, "%s", "/fou/baz");
msg = xrap_msg_encode (&xmsg);
rc = zwr_client_request (client, 0, &msg);
assert (rc == XRAP_TRAFFIC_NOT_FOUND);

zwr_client_destroy (&client);
zwr_client_destroy (&handler);

//  Done, shut down
zactor_destroy (&server);
----
