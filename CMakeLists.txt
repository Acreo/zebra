################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

########################################################################
# Project setup
########################################################################
cmake_minimum_required(VERSION 2.8)
project(zwebrap)
enable_language(C)
enable_testing()

set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}")

########################################################################
# determine version
########################################################################
foreach(which MAJOR MINOR PATCH)
    file(STRINGS "${SOURCE_DIR}/include/zwebrap_library.h" ZWEBRAP_VERSION_STRING REGEX "#define ZWEBRAP_VERSION_${which}")
    string(REGEX MATCH "#define ZWEBRAP_VERSION_${which} ([0-9_]+)" ZWEBRAP_REGEX_MATCH "${ZWEBRAP_VERSION_STRING}")
    if (NOT ZWEBRAP_REGEX_MATCH)
        message(FATAL_ERROR "failed to parse ZWEBRAP_VERSION_${which} from zwebrap.h")
    endif()
    set(ZWEBRAP_${which}_VERSION ${CMAKE_MATCH_1})
endforeach(which)

set(ZWEBRAP_VERSION ${ZWEBRAP_MAJOR_VERSION}.${ZWEBRAP_MINOR_VERSION}.${ZWEBRAP_PATCH_VERSION})

########################################################################
# platform.h
########################################################################
include(CheckIncludeFile)
CHECK_INCLUDE_FILE("linux/wireless.h" HAVE_LINUX_WIRELESS_H)
CHECK_INCLUDE_FILE("net/if_media.h" HAVE_NET_IF_MEDIA_H)

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS("getifaddrs" HAVE_GETIFADDRS)
CHECK_FUNCTION_EXISTS("freeifaddrs" HAVE_FREEIFADDRS)

include(CheckIncludeFiles)
check_include_files("sys/socket.h;net/if.h" HAVE_NET_IF_H)
if (NOT HAVE_NET_IF_H)
    CHECK_INCLUDE_FILE("net/if.h" HAVE_NET_IF_H)
endif()

file(WRITE "${BINARY_DIR}/platform.h.in" "
#cmakedefine HAVE_LINUX_WIRELESS_H
#cmakedefine HAVE_NET_IF_H
#cmakedefine HAVE_NET_IF_MEDIA_H
#cmakedefine HAVE_GETIFADDRS
#cmakedefine HAVE_FREEIFADDRS
")

configure_file("${BINARY_DIR}/platform.h.in" "${BINARY_DIR}/platform.h")

#The MSVC C compiler is too out of date,
#so the sources have to be compiled as c++
if (MSVC)
    enable_language(CXX)
    file(GLOB sources "${SOURCE_DIR}/src/*.c")
    set_source_files_properties(${sources} PROPERTIES LANGUAGE CXX)
    set(MORE_LIBRARIES ws2_32 Rpcrt4 Iphlpapi)
endif()

# required libraries for mingw
if (MINGW)
    set(MORE_LIBRARIES -lws2_32 -lrpcrt4 -liphlpapi)
endif()

# required libraries for cygwin
if (CYGWIN)
    set(MORE_LIBRARIES -luuid)
endif()

list(APPEND CMAKE_MODULE_PATH "${SOURCE_DIR}")

########################################################################
# LIBZMQ dependency
########################################################################
find_package(ZeroMQ REQUIRED)
IF (ZEROMQ_FOUND)
include_directories(${ZEROMQ_INCLUDE_DIRS})
list(APPEND MORE_LIBRARIES ${ZEROMQ_LIBRARIES})
ENDIF (ZEROMQ_FOUND)

########################################################################
# CZMQ dependency
########################################################################
find_package(CZMQ REQUIRED)
IF (CZMQ_FOUND)
include_directories(${CZMQ_INCLUDE_DIRS})
list(APPEND MORE_LIBRARIES ${CZMQ_LIBRARIES})
ENDIF (CZMQ_FOUND)

########################################################################
# LIBMICROHTTPD dependency
########################################################################
find_package(Libmicrohttpd REQUIRED)
IF (LIBMICROHTTPD_FOUND)
include_directories(${LIBMICROHTTPD_INCLUDE_DIRS})
list(APPEND MORE_LIBRARIES ${LIBMICROHTTPD_LIBRARIES})
ENDIF (LIBMICROHTTPD_FOUND)

########################################################################
# LIBCURL dependency
########################################################################
find_package(Libcurl)
IF (LIBCURL_FOUND)
include_directories(${LIBCURL_INCLUDE_DIRS})
list(APPEND MORE_LIBRARIES ${LIBCURL_LIBRARIES})
add_definitions(-DHAVE_LIBCURL)
ENDIF (LIBCURL_FOUND)

########################################################################
# includes
########################################################################
set (zwebrap_headers
    include/zwebrap_library.h
    include/zwebrap.h
    src/zwr_request.h
    src/zwr_response.h
    src/zwr_connection.h
    include/zwr_microhttpd.h
    include/xrap_msg.h
    include/xrap_traffic.h
    include/zwr_server.h
    include/zwr_client.h
    src/zwr_server_engine.inc
)
source_group ("Header Files" FILES ${zwebrap_headers})
install(FILES ${zwebrap_headers} DESTINATION include)

########################################################################
# library
########################################################################
include_directories("${BINARY_DIR}" "${SOURCE_DIR}/include")
set (zwebrap_sources
    src/zwr_request.c
    src/zwr_response.c
    src/zwr_connection.c
    src/zwr_microhttpd.c
    src/xrap_msg.c
    src/xrap_traffic.c
    src/zwr_server.c
    src/zwr_client.c
)
source_group ("Source Files" FILES ${zwebrap_sources})
if (NOT DEFINED BUILD_SHARED_LIBS)
    SET(BUILD_SHARED_LIBS ON)
endif()
add_library(zwebrap ${zwebrap_sources})
set_target_properties(zwebrap PROPERTIES DEFINE_SYMBOL "LIBZWEBRAP_EXPORTS")
target_link_libraries(zwebrap ${ZEROMQ_LIBRARIES} ${MORE_LIBRARIES})

install(TARGETS zwebrap
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin              # .dll file
)

########################################################################
# pkgconfig
########################################################################
set(VERSION "${ZWEBRAP_VERSION}")
set(prefix "${CMAKE_INSTALL_PREFIX}")
set(exec_prefix "\${prefix}")
set(libdir "\${prefix}/lib${LIB_SUFFIX}")
set(includedir "\${prefix}/include")
configure_file(
    "${SOURCE_DIR}/src/libzwebrap.pc.in"
    "${BINARY_DIR}/libzwebrap.pc"
@ONLY)

install(
    FILES "${BINARY_DIR}/libzwebrap.pc"
    DESTINATION "lib${LIB_SUFFIX}/pkgconfig"
)

########################################################################
# tests
########################################################################
add_executable(zwebrap_selftest "${SOURCE_DIR}/src/zwebrap_selftest.c")
target_link_libraries(zwebrap_selftest zwebrap ${ZEROMQ_LIBRARIES})

set(CLASSTEST_TIMEOUT 5 CACHE STRING "Timeout of the selftest of a class")
set(TOTAL_TIMEOUT 20 CACHE STRING "Timout of the total testsuite")

set(TEST_CLASSES
  zwr_request_test
  zwr_response_test
  zwr_connection_test
  zwr_microhttpd_test
  xrap msg_test
  xrap_traffic_test
  zwr_server_test
  zwr_client_test
)

foreach(TEST_CLASS ${TEST_CLASSES})
  add_test(NAME ${TEST_CLASS} COMMAND zwebrap_selftest -e -v --test ${TEST_CLASS})
  set_tests_properties(${TEST_CLASS} PROPERTIES TIMEOUT ${CLASSTEST_TIMEOUT})
endforeach(TEST_CLASS)

add_test(zwebrap_selftest zwebrap_selftest)
set_tests_properties(zwebrap_selftest PROPERTIES TIMEOUT ${TOTAL_TIMEOUT})
########################################################################
# summary
########################################################################
message(STATUS "version: ${ZWEBRAP_VERSION}")
message(STATUS "install: ${CMAKE_INSTALL_PREFIX}")

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
