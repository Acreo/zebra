/*  =========================================================================
    xrap_msg - XRAP serialization over ZMTP

    Codec header for xrap_msg.

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: xrap_msg.xml, or
     * The code generation script that built this file: zproto_codec_c_v1
    ************************************************************************
    Copyright (c) the Contributors as noted in the AUTHORS file.       
    This file is part of ZWEBRAP.                                      
                                                                       
    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.           
    =========================================================================
*/

#ifndef XRAP_MSG_H_INCLUDED
#define XRAP_MSG_H_INCLUDED

/*  These are the xrap_msg messages:

    POST - Create a new, dynamically named resource in some parent.
        parent              string      Schema/type/name
        content_type        string      Content type
        content_body        longstr     New resource specification

    POST_OK - Success response for POST.
        status_code         number 2    Response status code 2xx
        location            string      Schema/type/name
        etag                string      Opaque hash tag
        date_modified       number 8    Date and time modified
        content_type        string      Content type
        content_body        longstr     Resource contents
        metadata            hash        Collection total size/version/hypermedia

    GET - Retrieve a known resource.
        resource            string      Schema/type/name
        parameters          hash        Filtering/sorting/selecting/paging
        if_modified_since   number 8    GET if more recent
        if_none_match       string      GET if changed
        content_type        string      Desired content type

    GET_OK - Success response for GET.
        status_code         number 2    Response status code 2xx
        etag                string      Opaque hash tag
        date_modified       number 8    Date and time modified
        content_type        string      Actual content type
        content_body        longstr     Resource specification
        metadata            hash        Collection total size/version/hypermedia

    GET_EMPTY - Conditional GET returned 304 Not Modified.
        status_code         number 2    Response status code 3xx

    PUT - Update a known resource.
        resource            string      Schema/type/name
        if_unmodified_since  number 8   Update if same date
        if_match            string      Update if same ETag
        content_type        string      Content type
        content_body        longstr     New resource specification

    PUT_OK - Success response for PUT.
        status_code         number 2    Response status code 2xx
        location            string      Schema/type/name
        etag                string      Opaque hash tag
        date_modified       number 8    Date and time modified
        metadata            hash        Collection total size/version/hypermedia

    DELETE - Remove a known resource.
        resource            string      schema/type/name
        if_unmodified_since  number 8   DELETE if same date
        if_match            string      DELETE if same ETag

    DELETE_OK - Success response for DELETE.
        status_code         number 2    Response status code 2xx
        metadata            hash        Collection total size/version/hypermedia

    ERROR - Error response for any request.
        status_code         number 2    Response status code, 4xx or 5xx
        status_text         string      Response status text
*/


#define XRAP_MSG_POST                       1
#define XRAP_MSG_POST_OK                    2
#define XRAP_MSG_GET                        3
#define XRAP_MSG_GET_OK                     4
#define XRAP_MSG_GET_EMPTY                  5
#define XRAP_MSG_PUT                        6
#define XRAP_MSG_PUT_OK                     7
#define XRAP_MSG_DELETE                     8
#define XRAP_MSG_DELETE_OK                  9
#define XRAP_MSG_ERROR                      10

#include <czmq.h>


#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
#ifndef XRAP_MSG_T_DEFINED
typedef struct _xrap_msg_t xrap_msg_t;
#define XRAP_MSG_T_DEFINED
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/xrap_msg.xml" to make changes.
//  @interface
//  This is a draft class, and may change without notice. It is disabled in
//  stable builds by default. If you use this in applications, please ask
//  for it to be pushed to stable state. Use --enable-drafts to enable.
//  Self test of this class.
ZEBRA_EXPORT void
    xrap_msg_test (bool verbose);

#ifdef ZEBRA_BUILD_DRAFT_API
#define XRAP_MSG_POST 1                     // 
#define XRAP_MSG_POST_OK 2                  // 
#define XRAP_MSG_GET 3                      // 
#define XRAP_MSG_GET_OK 4                   // 
#define XRAP_MSG_GET_EMPTY 5                // 
#define XRAP_MSG_PUT 6                      // 
#define XRAP_MSG_PUT_OK 7                   // 
#define XRAP_MSG_DELETE 8                   // 
#define XRAP_MSG_DELETE_OK 9                // 
#define XRAP_MSG_ERROR 10                   // 

//  *** Draft method, for development use, may change without warning ***
//  Create a new xrap_msg
ZEBRA_EXPORT xrap_msg_t *
    xrap_msg_new (int id);

//  *** Draft method, for development use, may change without warning ***
//  Destroy the xrap_msg
ZEBRA_EXPORT void
    xrap_msg_destroy (xrap_msg_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Parse a xrap_msg from zmsg_t. Returns a new object, or NULL if
//  the message could not be parsed, or was NULL. Destroys msg and
//  nullifies the msg reference.                                  
ZEBRA_EXPORT xrap_msg_t *
    xrap_msg_decode (zmsg_t **msg_p);

//  *** Draft method, for development use, may change without warning ***
//  Encode xrap_msg into zmsg and destroy it. Returns a newly created       
//  object or NULL if error. Use when not in control of sending the message.
ZEBRA_EXPORT zmsg_t *
    xrap_msg_encode (xrap_msg_t **xrap_msg_p);

//  *** Draft method, for development use, may change without warning ***
//  Receive and parse a xrap_msg from the socket. Returns new object,
//  or NULL if error. Will block if there's no message waiting.      
ZEBRA_EXPORT xrap_msg_t *
    xrap_msg_recv (void *input);

//  *** Draft method, for development use, may change without warning ***
//  Receive and parse a xrap_msg from the socket. Returns new object,         
//  or NULL either if there was no input waiting, or the recv was interrupted.
ZEBRA_EXPORT xrap_msg_t *
    xrap_msg_recv_nowait (void *input);

//  *** Draft method, for development use, may change without warning ***
//  Send the xrap_msg to the output, and destroy it
ZEBRA_EXPORT int
    xrap_msg_send (xrap_msg_t **self_p, void *output);

//  *** Draft method, for development use, may change without warning ***
//  Send the xrap_msg to the output, and destroy it
ZEBRA_EXPORT int
    xrap_msg_send_again (xrap_msg_t *self, void *output);

//  *** Draft method, for development use, may change without warning ***
//  Get the xrap_msg id and printable command
ZEBRA_EXPORT int
    xrap_msg_id (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_id (xrap_msg_t *self, int id);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the parent field
ZEBRA_EXPORT const char *
    xrap_msg_parent (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_parent (xrap_msg_t *self, const char *format, ...) CHECK_PRINTF (2);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the content_type field
ZEBRA_EXPORT const char *
    xrap_msg_content_type (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_content_type (xrap_msg_t *self, const char *format, ...) CHECK_PRINTF (2);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the parent field
ZEBRA_EXPORT const char *
    xrap_msg_content_body (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_content_body (xrap_msg_t *self, const char *format, ...) CHECK_PRINTF (2);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the status_code field
ZEBRA_EXPORT uint16_t
    xrap_msg_status_code (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_status_code (xrap_msg_t *self, uint16_t status_code);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the location field
ZEBRA_EXPORT const char *
    xrap_msg_location (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_location (xrap_msg_t *self, const char *format, ...) CHECK_PRINTF (2);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the etag field
ZEBRA_EXPORT const char *
    xrap_msg_etag (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_etag (xrap_msg_t *self, const char *format, ...) CHECK_PRINTF (2);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the date_modified field
ZEBRA_EXPORT uint64_t
    xrap_msg_date_modified (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_date_modified (xrap_msg_t *self, uint64_t date_modified);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the resource field
ZEBRA_EXPORT const char *
    xrap_msg_resource (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_resource (xrap_msg_t *self, const char *format, ...) CHECK_PRINTF (2);

//  *** Draft method, for development use, may change without warning ***
//  //  Get/set the parameters field
ZEBRA_EXPORT zhash_t *
    xrap_msg_parameters (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  //  Get the parameters field and transfer ownership to caller
ZEBRA_EXPORT zhash_t *
    xrap_msg_get_parameters (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_parameters (xrap_msg_t *self, zhash_t **parameters_p);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the parameters field
ZEBRA_EXPORT const char *
    xrap_msg_parameters_string (xrap_msg_t *self, const char *key, const char *default_value);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_parameters_insert (xrap_msg_t *self, const char *key, const char *format, ...) CHECK_PRINTF (3);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the if_modified_since field
ZEBRA_EXPORT uint64_t
    xrap_msg_if_modified_since (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_if_modified_since (xrap_msg_t *self, uint64_t if_modified_since);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the if_none_match field
ZEBRA_EXPORT const char *
    xrap_msg_if_none_match (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_if_none_match (xrap_msg_t *self, const char *format, ...) CHECK_PRINTF (2);

//  *** Draft method, for development use, may change without warning ***
//  //  Get/set the metadata field
ZEBRA_EXPORT zhash_t *
    xrap_msg_metadata (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  //  Get the metadata field and transfer ownership to caller
ZEBRA_EXPORT zhash_t *
    xrap_msg_get_metadata (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_metadata (xrap_msg_t *self, zhash_t **metadata_p);

//  *** Draft method, for development use, may change without warning ***
//  Get/set a value in the metadata dictionary
ZEBRA_EXPORT const char *
    xrap_msg_metadata_string (xrap_msg_t *self, const char *key, const char *default_value);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_metadata_insert (xrap_msg_t *self, const char *key, const char *format, ...) CHECK_PRINTF (3);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the if_unmodified_since field
ZEBRA_EXPORT uint64_t
    xrap_msg_if_unmodified_since (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_if_unmodified_since (xrap_msg_t *self, uint64_t if_unmodified_since);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the if_match field
ZEBRA_EXPORT const char *
    xrap_msg_if_match (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_if_match (xrap_msg_t *self, const char *format, ...) CHECK_PRINTF (2);

//  *** Draft method, for development use, may change without warning ***
//  Get/set the status_text field
ZEBRA_EXPORT const char *
    xrap_msg_status_text (xrap_msg_t *self);

//  *** Draft method, for development use, may change without warning ***
//  
ZEBRA_EXPORT void
    xrap_msg_set_status_text (xrap_msg_t *self, const char *format, ...) CHECK_PRINTF (2);

#endif // ZEBRA_BUILD_DRAFT_API
//  @end

//  For backwards compatibility with old codecs
#define xrap_msg_dump       xrap_msg_print

#ifdef __cplusplus
}
#endif

#endif
