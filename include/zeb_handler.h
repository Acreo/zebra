/*  =========================================================================
    zeb_handler - Handler for XRAP requests

    Copyright (c) the Contributors as noted in the AUTHORS file.
    This file is part of ZWEBRAP.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef ZEB_HANDLER_H_INCLUDED
#define ZEB_HANDLER_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/zeb_handler.xml" to make changes.
//  @interface
//  This is a draft class, and may change without notice. It is disabled in
//  stable builds by default. If you use this in applications, please ask
//  for it to be pushed to stable state. Use --enable-drafts to enable.
//  Self test of this class.
ZEBRA_EXPORT void
    zeb_handler_test (bool verbose);

#ifdef ZEBRA_BUILD_DRAFT_API
//  To work with zeb_handler, use the CZMQ zactor API:                      
//                                                                          
//  Create new zeb_handler instance, passing dispatcher endpoint:           
//                                                                          
//      zactor_t *handler = zactor_new (zeb_handler, "inproc://dispatcher");
//                                                                          
//  Destroy zeb_handler instance                                            
//                                                                          
//      zactor_destroy (&handler);                                          
//                                                                          
//  Enable verbose logging of commands and activity:                        
//                                                                          
//      zstr_send (handler, "VERBOSE");                                     
//                                                                          
//  Receive API calls from zeb_handler:                                     
//                                                                          
//      char *command = zstr_recv (handler);                                
//                                                                          
//  Check if an etag is current, MUST signal 0 if true otherwise 1.         
//                                                                          
//    if (streq (command, "CHECK ETAG")) {                                  
//       char *etag = zstr_recv (handler);                                  
//       zsock_signal (handler, 0);                                         
//    }                                                                     
//                                                                          
//    Check if a last modified timestamp is current, MUST signal 0 if true  
//    otherwise 1.                                                          
//                                                                          
//    if (streq (command, "CHECK LAST MODIFIED")) {                         
//       uint64_t last_modified;                                            
//       zsock_brecv (handler, "8", &last_modified);                        
//       zsock_signal (handler, 0);                                         
//    }                                                                     
//                                                                          
//  Handle incomming request from clients. MUST return a response.          
//                                                                          
//  if (streq (command, "HANDLE REQUEST")) {                                
//      zmsg_t *request = zmsg_recv (handle);                               
//      xrap_msg_t *xrequest = xrap_msg_decode (&request);                  
//      zmsg_t *response = xrap_msg_encode (&xrequest);                     
//      zmsg_send (&response, handler);                                     
//  }                                                                       
//                                                                          
//  This is the handler actor which runs in its own thread and polls its two
//  sockets to process incoming messages.                                   
ZEBRA_EXPORT void
    zeb_handler (zsock_t *pipe, void *args);

//  *** Draft method, for development use, may change without warning ***
//  Add a new offer this handler will handle. Returns 0 if successful,
//  otherwise -1.                                                     
ZEBRA_EXPORT int
    zeb_handler_add_offer (zactor_t *self, int method, const char *uri);

//  *** Draft method, for development use, may change without warning ***
//  Add a new accept type that this handler can deliver. May be a regular
//  expression. Returns 0 if successfull, otherwise -1.                  
ZEBRA_EXPORT int
    zeb_handler_add_accept (zactor_t *self, const char *accept);

#endif // ZEBRA_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
