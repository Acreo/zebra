<class name = "zeb_handler">
    <!--
    Copyright (c) the Contributors as noted in the AUTHORS file.
    This file is part of ZEBRA.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    -->
    Handler for XRAP requests

    <actor>
        To work with zeb_handler, use the CZMQ zactor API:

        Create new zeb_handler instance, passing the broker endpoint:

            zactor_t *handler = zactor_new (zeb_handler, "inproc://broker");

        Destroy zeb_handler instance

            zactor_destroy (&amp;handler);

        Enable verbose logging of commands and activity:

            zstr_send (handler, "VERBOSE");

        Receive API calls from zeb_handler:

            char *command = zstr_recv (handler);

        Check if an etag is current, MUST signal 0 if true otherwise 1.

          if (streq (command, "CHECK ETAG")) {
             char *etag = zstr_recv (handler);
             zsock_signal (handler, 0);
          }

        Check if a last modified timestamp is current, MUST signal 0 if true
        otherwise 1.

          if (streq (command, "CHECK LAST MODIFIED")) {
             uint64_t last_modified;
             zsock_brecv (handler, "8", &amp;last_modified);
             zsock_signal (handler, 0);
          }

        Handle incomming request from clients. MUST return a response.

        if (streq (command, "HANDLE REQUEST")) {
            zmsg_t *request = zmsg_recv (handle);
            xrap_msg_t *xrequest = xrap_msg_decode (&amp;request);
            zmsg_t *response = xrap_msg_encode (&amp;xrequest);
            zmsg_send (&amp;response, handler);
        }

        This is the handler actor which runs in its own thread and polls its two
        sockets to process incoming messages.
    </actor>

    <method name = "add offer" singleton = "1">
        Add a new offer this handler will handle. Returns 0 if successful,
        otherwise -1.
        The content type parameter is optional and is used to
        filter requests upon their requested (GET) or provided (POST/PUT)
        content's type. The content type parameter may be a regex which is
        useful for GET offers that can supply resources in different formats.
        If the client did request multiple content types then the first match
        will be chosen and applied to the request. All other content types are
        drooped. If the request's content type does not match it is automatically
        rejected with the error code 406 (Not acceptable).
        <argument name = "self" type = "zactor" />
        <argument name = "method" type = "integer" />
        <argument name = "uri" type = "string" />
        <argument name = "content type" type = "string" />
        <return type = "integer" />
    </method>

</class>

